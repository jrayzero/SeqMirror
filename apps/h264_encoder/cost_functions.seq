from params import *
from cola.block import *

# min_cost allows for an early exit if you exceed it
def sad(real, pred, min_cost: int = INT_MAX) -> int:
  cost = 0
  if min_cost == INT_MAX:
    # no early exit
    for r,p in zip(real, pred):
      cost += r() - p()
    return cost
  else:
    for r,p in zip(real, pred):
      cost += r() - p()
      if cost > min_cost:
        return min_cost
    return cost

def sse(real, pred, min_cost: int = INT_MAX) -> int:    
  cost = 0
  if min_cost == INT_MAX:
    # no early exit
    for r,p in zip(real, pred):
      cost += (r() - p()) ** 2
    return cost
  else:
    for r,p in zip(real, pred):
      cost += (r() - p()) ** 2
      if cost > min_cost:
        return min_cost
    return cost

# ugh why do they have to write it all unrolled. And why is it different from their other 4x4 Hadamard??
def hadamard_SAD_4x4(diff: Block[int]) -> int:
  m = Block[int](4,4)
  d = Block[int](4,4)
  m[0,0] = diff(0,0) + diff(3,0)
  m[0,1] = diff(0,1) + diff(3,1)
  m[0,2] = diff(0,2) + diff(3,2)
  m[0,3] = diff(0,3) + diff(3,3)
  m[1,0] = diff(1,0) + diff(2,0)
  m[1,1] = diff(1,1) + diff(2,1)
  m[1,2] = diff(1,2) + diff(2,2)
  m[1,3] = diff(1,3) + diff(2,3)
  m[2,0] = diff(1,0) + diff(2,0)
  m[2,1] = diff(1,1) + diff(2,1)
  m[2,2] = diff(1,2) + diff(2,2)
  m[2,3] = diff(1,3) + diff(2,3)
  m[3,0] = diff(0,0) + diff(3,0)
  m[3,1] = diff(0,1) + diff(3,1)
  m[3,2] = diff(0,2) + diff(3,2)
  m[3,3] = diff(0,3) + diff(3,3)
    
  d[0,0] = diff(0,0) + diff(1,0)
  d[0,1] = diff(0,1) + diff(1,1)
  d[0,2] = diff(0,2) + diff(1,2)
  d[0,3] = diff(0,3) + diff(1,3)
  d[1,0] = diff(2,0) + diff(3,0)
  d[1,1] = diff(2,1) + diff(3,1)
  d[1,2] = diff(2,2) + diff(3,2)
  d[1,3] = diff(2,3) + diff(3,3)
  d[2,0] = diff(0,0) + diff(1,0)
  d[2,1] = diff(0,1) + diff(1,1)
  d[2,2] = diff(0,2) + diff(1,2)
  d[2,3] = diff(0,3) + diff(1,3)
  d[3,0] = diff(3,0) + diff(2,0)
  d[3,1] = diff(3,1) + diff(2,1)
  d[3,2] = diff(3,2) + diff(2,2)
  d[3,3] = diff(3,3) + diff(2,3)
  
  m[0,0] = d(0,0) + d(0,3)
  m[0,1] = d(0,1) + d(0,2)
  m[0,2] = d(0,1) + d(0,2)
  m[0,3] = d(0,0) + d(0,3)
  m[1,0] = d(1,0) + d(1,3)
  m[1,1] = d(1,1) + d(1,2)
  m[1,2] = d(1,1) + d(1,2)
  m[1,3] = d(1,0) + d(1,3)
  m[2,0] = d(2,0) + d(2,3)
  m[2,1] = d(2,1) + d(2,2)
  m[2,2] = d(2,1) + d(2,2)
  m[2,3] = d(2,0) + d(2,3)
  m[3,0] = d(3,0) + d(3,3)
  m[3,1] = d(3,1) + d(3,2)
  m[3,2] = d(3,1) + d(3,2)
  m[3,3] = d(3,0) + d(3,3)

  cost = 0
  for _m in m:
    cost += abs(_m())
  return (cost + 1) >> 1

# TODO figure out the loop version of the Hadamard and implement a generic one
# The compiler can unroll it
def satd_4x4[T](real: View[T], pred: View[T]) -> int:
  diffs = Block[T](real.dims())
  for r,p,d in zip(real, pred, diffs):
    d[ALL] = r() - p()
  return hadamard_SAD_4x4(diffs)

