from cola.block import *

def forward4x4[T](inp_blk: View[T], out_blk: View[int]):
  # horizontal
  for r in range(4):
    in_row = inp_blk[0,r,:]
    out_row = out_blk[0,r,:]
    p0 = in_row(0,0,0)
    p1 = in_row(0,0,1)
    p2 = in_row(0,0,2)
    p3 = in_row(0,0,3)
    t0 = p0 + p3
    t1 = p1 + p2
    t2 = p1 - p2
    t3 = p0 - p3
    out_row[0,0,0] = t0 + t1
    out_row[0,0,1] = (t3 << T(1)) + t2
    out_row[0,0,2] = t0 - t1
    out_row[0,0,3] = t3 - (t2 << T(1))
  # vertical
  for c in range(4):
    in_col = out_blk[0,:,c]
    p0 = in_col(0,0,0)
    p1 = in_col(0,1,0)
    p2 = in_col(0,2,0)
    p3 = in_col(0,3,0)
    t0 = p0 + p3
    t1 = p1 + p2
    t2 = p1 - p2
    t3 = p0 - p3
    in_col[0,0,0] = t0 + t1
    in_col[0,1,0] = t2 + (t3 << T(1))
    in_col[0,2,0] = t0 - t1
    in_col[0,3,0] = t3 - (t2 << T(1))

def hadamard4x4[T](inp_blk: View[T], out_blk: Block[T]):
  # horizontal
  for r in range(4):
    in_row = inp_blk[0,r,:]
    out_row = out_blk[0,r,:]
    p0 = in_row(0,0,0)
    p1 = in_row(0,0,1)
    p2 = in_row(0,0,2)
    p3 = in_row(0,0,3)
    t0 = p0 + p3
    t1 = p1 + p2
    t2 = p1 - p2
    t3 = p0 - p3
    out_row[0,0,0] = t0 + t1
    out_row[0,0,1] = t3 + t2
    out_row[0,0,2] = t0 - t1
    out_row[0,0,3] = t3 - t2
  # vertical
  for c in range(4):
    in_col = out_blk[0,:,c]
    p0 = in_col(0,0,0)
    p1 = in_col(0,1,0)
    p2 = in_col(0,2,0)
    p3 = in_col(0,3,0)
    t0 = p0 + p3
    t1 = p1 + p2
    t2 = p1 - p2
    t3 = p0 - p3
    in_col[0,0,0] = (t0 + t1) >> T(1)
    in_col[0,1,0] = (t2 + t3) >> T(1)
    in_col[0,2,0] = (t0 - t1) >> T(1)
    in_col[0,3,0] = (t3 - t2) >> T(1)

def hadamard2x2(inp_blk,out_blk):
  p0 = inp_blk(0,0,0) + inp_blk(0,0,1)
  p1 = inp_blk(0,0,0) - inp_blk(0,0,1)
  p2 = inp_blk(0,1,0) + inp_blk(0,1,1)
  p3 = inp_blk(0,1,0) - inp_blk(0,1,1)
  out_blk[0,0,0] = p0 + p2
  out_blk[0,0,1] = p1 + p3
  out_blk[0,1,0] = p0 - p2
  out_blk[0,1,0] = p1 - p3

def ihadamard2x2(inp_blk,out_blk):
  t0 = inp_blk(0,0,0) + inp_blk(0,0,1)
  t1 = inp_blk(0,0,0) - inp_blk(0,0,1)
  t2 = inp_blk(0,1,0) + inp_blk(0,1,1)
  t3 = inp_blk(0,1,0) - inp_blk(0,1,1)
  out_blk[0,0,0] = t0 + t2
  out_blk[0,0,1] = t1 + t3
  out_blk[0,1,0] = t0 - t2
  out_blk[0,1,1] = t1 - t3

def inverse4x4(inp_blk, out_blk):
  # horizontal
  for r in range(4):
    in_row = inp_blk[0,r,:]
    out_row = out_blk[0,r,:]
    t0 = in_row(0, 0, 0)
    t1 = in_row(0, 0, 1)
    t2 = in_row(0, 0, 2)
    t3 = in_row(0, 0, 3)
    p0 = t0 + t2
    p1 = t0 - t2
    p2 = (t1 >> 1) - t3
    p3 = t1 + (t3 >> 1)
    out_row[0, 0, 0] = p0 + p3
    out_row[0, 0, 1] = p1 + p2
    out_row[0, 0, 2] = p1 - p2
    out_row[0, 0, 3] = p0 - p3
  # vertical
  for c in range(4):
    in_col = out_blk[0,:,c]
    t0 = in_col(0, 0, 0)
    t1 = in_col(0, 1, 0)
    t2 = in_col(0, 2, 0)
    t3 = in_col(0, 3, 0)
    p0 = t0 + t2
    p1 = t0 - t2
    p2 = (t1 >> 1) - t3
    p3 = t1 + (t3 >> 1)
    in_col[0, 0, 0] = p0 + p3
    in_col[0, 1, 0] = p1 + p2
    in_col[0, 2, 0] = p1 - p2
    in_col[0, 3, 0] = p0 - p3

def ihadamard4x4(inp_blk,out_blk):
  # horizontal
  for r in range(4):
    in_row = inp_blk[0,r,:]
    out_row = out_blk[0,r,:]
    t0 = in_row(0, 0, 0)
    t1 = in_row(0, 0, 1)
    t2 = in_row(0, 0, 2)
    t3 = in_row(0, 0, 3)
    p0 = t0 + t2
    p1 = t0 - t2
    p2 = t1 - t3
    p3 = t1 + t3
    out_row[0, 0, 0] = p0 + p3
    out_row[0, 0, 1] = p1 + p2
    out_row[0, 0, 2] = p1 - p2
    out_row[0, 0, 3] = p0 - p3
  # vertical
  for c in range(4):
    in_col = out_blk[0,:,c]
    t0 = in_col(0, 0, 0)
    t1 = in_col(0, 1, 0)
    t2 = in_col(0, 2, 0)
    t3 = in_col(0, 3, 0)
    p0 = t0 + t2
    p1 = t0 - t2
    p2 = t1 - t3
    p3 = t1 + t3
    in_col[0, 0, 0] = (p0 + p3)
    in_col[0, 1, 0] = (p1 + p2)
    in_col[0, 2, 0] = (p1 - p2)
    in_col[0, 3, 0] = (p0 - p3)
  
# ihadamard4x2
def ihadamard2x4(inp_blk):
  out_blk = Block(inp_blk)
  out_blk[0,0] = inp_blk(0,0) + inp_blk(1,0)
  out_blk[0,1] = inp_blk(0,1) + inp_blk(1,1)
  out_blk[0,2] = inp_blk(0,2) + inp_blk(1,2)
  out_blk[0,3] = inp_blk(0,3) + inp_blk(1,3)
  out_blk[1,0] = inp_blk(0,0) - inp_blk(1,0)
  out_blk[1,1] = inp_blk(0,1) - inp_blk(1,1)
  out_blk[1,2] = inp_blk(0,2) - inp_blk(1,2)
  out_blk[1,3] = inp_blk(0,3) - inp_blk(1,3)
  for r in range(2):
    in_row = out_blk[r,:]
    p0 = in_row(0, 0)
    p1 = in_row(0, 1)
    p2 = in_row(0, 2)
    p3 = in_row(0, 3)

    t0 = p0 + p2;
    t1 = p0 - p2;
    t2 = p1 - p3;
    t3 = p1 + p3;

    in_row[0, 0] = t0 + t3
    in_row[0, 1] = t1 + t2
    in_row[0, 2] = t1 - t2
    in_row[0, 3] = t0 - t3
  return out_blk

def inverse8x8(inp_blk):
  out_blk = Block(inp_blk)
  for r in range(8):
    in_row = inp_blk[r,:]
    out_row = out_blk[r,:]
    p0 = in_row(0, 0)
    p1 = in_row(0, 1)
    p2 = in_row(0, 2)
    p3 = in_row(0, 3)
    p4 = in_row(0, 4)
    p5 = in_row(0, 5)
    p6 = in_row(0, 6)
    p7 = in_row(0, 7)

    a0 = p0 + p4;
    a1 = p0 - p4;
    a2 = p6 - (p2 >> 1);
    a3 = p2 + (p6 >> 1);

    b0 = a0 + a3;
    b2 = a1 - a2;
    b4 = a1 + a2;
    b6 = a0 - a3;

    a0 = -p3 + p5 - p7 - (p7 >> 1)
    a1 =  p1 + p7 - p3 - (p3 >> 1)
    a2 = -p1 + p7 + p5 + (p5 >> 1)
    a3 =  p3 + p5 + p1 + (p1 >> 1)

    b1 = a0 + (a3 >> 2)
    b3 = a1 + (a2 >> 2)
    b5 = a2 - (a1 >> 2)
    b7 = a3 - (a0 >> 2)

    out_row[0, 0] =  b0 + b7;
    out_row[0, 1] =  b2 - b5;
    out_row[0, 2] =  b4 + b3;
    out_row[0, 3] =  b6 + b1;
    out_row[0, 4] =  b6 - b1;
    out_row[0, 5] =  b4 - b3;
    out_row[0, 6] =  b2 + b5;   
    out_row[0, 7] =  b0 - b7;
  for c in range(8):
    in_col = out_blk[:,c]
    p0 = in_col(0, 0)
    p1 = in_col(1, 0)
    p2 = in_col(2, 0)
    p3 = in_col(3, 0)
    p4 = in_col(4, 0)
    p5 = in_col(5, 0)
    p6 = in_col(6, 0)
    p7 = in_col(7, 0)

    a0 =  p0 + p4;
    a1 =  p0 - p4;
    a2 =  p6 - (p2 >> 1);
    a3 =  p2 + (p6 >> 1);

    b0 = a0 + a3;
    b2 = a1 - a2;
    b4 = a1 + a2;
    b6 = a0 - a3;

    a0 = -p3 + p5 - p7 - (p7 >> 1);
    a1 =  p1 + p7 - p3 - (p3 >> 1);
    a2 = -p1 + p7 + p5 + (p5 >> 1);
    a3 =  p3 + p5 + p1 + (p1 >> 1);


    b1 =  a0 + (a3 >> 2);
    b7 =  a3 - (a0 >> 2);
    b3 =  a1 + (a2 >> 2);
    b5 =  a2 - (a1 >> 2);

    in_col[0, 0] =  b0 + b7;
    in_col[1, 0] =  b2 - b5;
    in_col[2, 0] =  b4 + b3;
    in_col[3, 0] =  b6 + b1;
    in_col[4, 0] =  b6 - b1;
    in_col[5, 0] =  b4 - b3;
    in_col[6, 0] =  b2 + b5;
    in_col[7, 0] =  b0 - b7;

  return out_blk

