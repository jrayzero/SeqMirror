from error import *
from cola.block import *
from cola.iter_utils import *
import math

def generate_rgb_ycc_table_rmaj() -> Block[int]:
  table = Block[int](9,256)
  fix = lambda x : x * (1<<16) + 0.5
  for i in range(256):
    table[0,i] = int(math.floor(fix(0.299) * i))
    table[1,i] = int(math.floor(fix(0.587) * i))
    table[2,i] = int(math.floor(fix(0.114) * i + (1<<15)))
    table[3,i] = int(math.floor(-fix(0.16874) * i))
    table[4,i] = int(math.floor(-fix(0.33126) * i))
    table[5,i] = int(math.floor(fix(0.5) * i + (128 << 16) + (1 << 15) - 1))
    table[6,i] = int(math.floor(fix(0.5) * i + (128 << 16) + (1 << 15) - 1))
    table[7,i] = int(math.floor(-fix(0.41869) * i))
    table[8,i] = int(math.floor(-fix(0.08131) * i))
  return table

def generate_rescale_table(realized_max_val, bounded_max_val=255) -> list[int]:
  table = list[int](realized_max_val + 1)
  half_max_val = realized_max_val // 2
  for v in range(realized_max_val + 1):
    table[v] = (v * bounded_max_val + half_max_val) // realized_max_val
  return table

# You can do the level shifts here if you are using signed values as the input data. Otherwise it doesn't really make sense
def rgb_ycc_convert_rmaj[T](input_data: View[T], output_data: View[T], rgb_ycc_table: Block[int], shift: int = 16):
  R = input_data[:,:,0]
  G = input_data[:,:,1]
  B = input_data[:,:,2]
  Y = output_data[:,:,0]
  Cb = output_data[:,:,1]
  Cr = output_data[:,:,2]
  shft = T(shift)
  for _r,_g,_b,y,cb,cr in scan(R,G,B,Y,Cb,Cr):
    r,g,b = int(_r()), int(_g()), int(_b())
    y[0] = T(rgb_ycc_table(0,r) + rgb_ycc_table(1,g) + rgb_ycc_table(2,b)) >> shft
    cb[0] = T(rgb_ycc_table(3,r) + rgb_ycc_table(4,g) + rgb_ycc_table(5,b)) >> shft
    cr[0] = T(rgb_ycc_table(6,r) + rgb_ycc_table(7,g) + rgb_ycc_table(8,b)) >> shft

def rgb_gray_convert_rmaj[T](input_data: View[T], output_data: View[T], rgb_ycc_table: Block[int], shift: int = 16):
  raise NotTestedError()
  R = input_data[:,:,0]
  G = input_data[:,:,1]
  B = input_data[:,:,2]
  Y = output_data[:,:,0]
  shft = T(shift)
  for _r,_g,_b,y in scan(R,G,B,Y):
    r,g,b = int(_r()), int(_g()), int(_b())
    y[0] = T(rgb_ycc_table(0,r) + rgb_ycc_table(1,g) + rgb_ycc_table(2,b)) >> shft

def cmyk_ycck_convert_rmaj[T](input_data: View[T], output_data: View[T], rgb_ycc_table: Block[int], max_sample: int = 255, shift: int = 16):
  raise NotTestedError()
  C = input_data[:,:,0]
  M = input_data[:,:,1]
  Y2 = input_data[:,:,2]
  K1 = input_data[:,:,3]
  Y1 = output_data[:,:,0]
  Cb = output_data[:,:,1]
  Cr = output_data[:,:,2]
  K2 = output_data[:,:,4]
  shft = T(shift)
  for c,m,y1,k1,y2,cb,cr,k2 in scan(C,M,Y1,K1,Y2,Cb,Cr,K2):
    r = max_sample - int(c())
    g = max_sample - int(m())
    b = max_sample - int(y1())
    y2[0] = T(rgb_ycc_table(0,r) + rgb_ycc_table(1,g) + rgb_ycc_table(2,b)) >> shft
    cb[0] = T(rgb_ycc_table(3,r) + rgb_ycc_table(4,g) + rgb_ycc_table(5,b)) >> shft
    cr[0] = T(rgb_ycc_table(6,r) + rgb_ycc_table(7,g) + rgb_ycc_table(8,b)) >> shft
    k2[0] = k1()

### TESTING

    
  
