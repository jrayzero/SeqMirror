from error import *
from zigzag import *
from cola.bitseq import *

# standard Huffman tables from K.3
# I made these ints so I don't need to cast each element within them
bits_dc_luminance = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
val_dc_luminance = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
bits_dc_chrominance = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]
val_dc_chrominance = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
bits_ac_luminance = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d]
val_ac_luminance = [0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
                    0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
                    0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,
                    0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0,
                    0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,
                    0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,
                    0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
                    0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
                    0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
                    0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
                    0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
                    0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
                    0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
                    0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
                    0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
                    0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,
                    0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,
                    0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,
                    0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
                    0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
                    0xf9, 0xfa]
bits_ac_chrominance = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77]
val_ac_chrominance = [0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21,
                      0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,
                      0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,
                      0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0,
                      0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34,
                      0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,
                      0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38,
                      0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
                      0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
                      0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
                      0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
                      0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
                      0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,
                      0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
                      0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4,
                      0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
                      0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2,
                      0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
                      0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
                      0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
                      0xf9, 0xfa]
  
# jchuff.c
def make_derived_huffman_table(htable_bits: list[int], htable_val: list[int], is_dc: bool) -> Tuple[list[int], list[int]]
  p = 0
  huffsize = list[int](257)
  huffcode = list[int](257)
  for l in range(1, 17):
    i = htable_bits[l]
    if i < 0 or p + 1 > 256:
      raise HuffmanError()
    while i > 0:
      huffsize[p] = l
      p += 1
      i -= 1
  huffsize[p] = 0
  lastp = p

  code = 0
  si = huffsize[0]
  p = 0
  while huffsize[p] > 0:
    while huffsize[p] == si:
      huffcode[p] = code
      p += 1
      code += 1
    if code >= (1 << si):
      raise HuffmanError()
    code <<= 1
    si += 1
  
  ehufsi = list[int](256)
  ehufco = list[int](256)
  
  max_symbol = 15 if is_dc else 255
  for p in range(lastp):
    i = htable[val]
    if i < 0 or i > max_symbol or ehufsi[i] == 0:
      raise HuffmanError()
    ehufco[i] = huffcode[p]
    ehufsi[i] = huffsize[p]
    
  return ehufco, ehufsi

def encode[T](blk: View[T], ehufco_dc: list[int], ehufco_ac: list[int], 
              ehufsi_dc: list[int], ehufsi_ac: list[int], last_dc: T, max_coeff_bits: int = 10) -> BitSeq:
  tmp = tmp2 = int(blk(0,0)) - int(last_dc)
  if tmp < 0:
    tmp = -tmp
    tmp2 -= 1

  nbits = 0
  while tmp > 0:
    nbits += 1
    tmp >>= 1
    
  if nbits > max_coeff_bits:
    raise HuffmanError()

  bitseq = BitSeq(ehufco_dc[nbits], ehufsi_dc[nbits])
  bitseq.pack(temp2, nbits)
  
  r = 0
  zz = iter(zigzag(blk))
  next(zz) # skip over DC coeffecient
  for _ac in zz:
    ac = _ac()
    if ac == 0:
      r += 1
    else:
      while r > 15:
        bitseq.pack(ehufsi_ac[0xF0], ehufsi_ac[0xF0])
        r -= 16
      ac2 = ac
      if ac < 0:
        ac = -ac
        ac2 -= 1
      nbits = 1
      ac >>= 1
      nbits = 1
      while ac > 0:
        nbits += 1
        ac >>= 1
      if nbits > max_coeff_bits:
        raise HuffmanError()
      i = (r << 4) + nbits
      bitseq.pack(efhuco_ac[i], ehufsi_ac[i])
      bitseq.pack(ac2, nbits)
      r = 0

  if r > 0:
    bitseq.pack(ehufco_ac[0], ehufsi_ac[0])

  return bitseq

def generate_optimal_htable(freqs: list[int]) -> Tuple[list[int], list[int]]:
  assert len(freqs) >= 257
  bits = list[int](33)
  codesize = list[int](257)
  others = list[int](257)
  for i in range(257):
    others[i] = -1
  freqs[256] = 1
  
  while True:
    c1 = -1
    v = 1000000000
    for i in range(257):
      if freq[i] > 0 and freq[i] <= v:
        v = freq[i]
        c1 = i

    c2 = -1
    v = 1000000000
    for i in range(257):
      if freq[i] > 0 and freq[i] <= v and i != c1:
        v = freq[i]
        c2 = i

    if c2 < 0:
      break

    freq[c1] += freq[c2]
    freq[c2] = 0
    codesize[c1] += 1
    while others[c1] >= 0:
      c1 = others[c1]
      codesize[c1] += 1      
    others[c1] = c2

    codesize[c2] += 1
    while others[c2] >= 0:
      c2 = others[c2]
      codesize[c2] += 1
    
    for i in range(257):
      if codesize[i]:
        bits[codesize[i]] += 1

    for i in range(32, 16, -1):
      while bits[i] > 0:
        j = i - 2
        while bits[j] == 0:
          j -= 1
        bits[i] -= 2
        bits[i-1] += 1
        bits[j+1] += 2
        bits[j] -= 1

    while bits[i] == 0:
      i -= 1
    bits[i] -= 1
    huffval = list[int](256)
    p = 0
    for i in range(33):
      for j in range(256):
        if codesize[j] == i:
          huffval[p] = j
          p += 1
    
    return bits, huffval

def gather_freqs(data: View[u8]) -> list[int]:
  freqs = [0] * 257
  for d in data:
    freqs[d()] += 1
  return freqs
