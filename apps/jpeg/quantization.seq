from error import *
from cola.block import *
from cola.iter_utils import *

# standard K.1
jpeg_luma_qtable = Block[int]((8,8), 
                              [16,  11,  10,  16,  24,  40,  51,  61,
	                       12,  12,  14,  19,  26,  58,  60,  55,
	                       14,  13,  16,  24,  40,  57,  69,  56,
	                       14,  17,  22,  29,  51,  87,  80,  62,
	                       18,  22,  37,  56,  68, 109, 103,  77,
	                       24,  35,  55,  64,  81, 104, 113,  92,
	                       49,  64,  78,  87, 103, 121, 120, 101,
	                       72,  92,  95,  98, 112, 100, 103,  99])

jpeg_chroma_qtable = Block[int]((8,8), 
                                [17,  18,  24,  47,  99,  99,  99,  99,
	                         18,  21,  26,  66,  99,  99,  99,  99,
	                         24,  26,  56,  99,  99,  99,  99,  99,
	                         47,  66,  99,  99,  99,  99,  99,  99,
	                         99,  99,  99,  99,  99,  99,  99,  99,
	                         99,  99,  99,  99,  99,  99,  99,  99,
	                         99,  99,  99,  99,  99,  99,  99,  99,
	                         99,  99,  99,  99,  99,  99,  99,  99])

# from jpeg-6b

# convert 0-100 quality factor to scaling factor
def quality_to_scaling(quality: int):
  if quality <= 0:
    quality = 1
  elif quality > 100:
    quality = 100
  if quality < 50:
    return 5000 // quality
  else:
    return 200 - quality * 2

### scale actual quantization tables

def scale_quant_table2(qtable: Block[int], out_qtable: Block[int], scale_factor: int, force_baseline: bool):
  for q,sq in zip(qtable, out_qtable):
    tmp = (q() * scale_factor + 50) // 100
    if tmp <= 0:
      tmp = 1
    if tmp > 32767:
      tmp = 32767
    if force_baseline and tmp > 255:
      tmp = 255
    sq[0] = tmp

def scale_quant_table(qtable: Block[int], scale_factor: int, force_baseline: bool) -> Block[int]:
  out_qtable = Block(qtable)
  scale_quant_table2(qtable, out_qtable, scale_factor, force_baseline)
  return out_qtable

def scale_quant_table_inplace(qtable: Block[int], scale_factor: int, force_baseline: bool):
  scale_quant_table2(qtable, qtable, scale_factor, force_baseline)

### from a quantization table, compute actual quantization values (i.e. divisor)

def compute_qdivisors_LLM_idct(qtable: Block[int], divisors: Block[int]):
  divisors[:,:] = qtable << 3

def compute_qdivisors_AAN_idct_short(qtable: Block[int], divisors: Block[u16]):
  aan_scales = Block[u16]((8,8), 
                          [u16(16384), u16(22725), u16(21407), u16(19266), u16(16384), u16(12873), u16( 8867), u16( 4520),
	                   u16(22725), u16(31521), u16(29692), u16(26722), u16(22725), u16(17855), u16(12299), u16( 6270),
	                   u16(21407), u16(29692), u16(27969), u16(25172), u16(21407), u16(16819), u16(11585), u16( 5906),
	                   u16(19266), u16(26722), u16(25172), u16(22654), u16(19266), u16(15137), u16(10426), u16( 5315),
	                   u16(16384), u16(22725), u16(21407), u16(19266), u16(16384), u16(12873), u16( 8867), u16( 4520),
	                   u16(12873), u16(17855), u16(16819), u16(15137), u16(12873), u16(10114), u16( 6967), u16( 3552),
	                   u16(8867), u16(12299), u16(11585), u16(10426), u16(8867), u16( 6967), u16(4799), u16(2446),
	                   u16(4520), u16(6270), u16(5906), u16(5315), u16(4520), u16(3552), u16(2446), u16(1247)])
  for q,s,d in zip(qtable, aan_scales, divisors):
    d[0] = (u16(q()) * s() + (u16(1) << u16(10))) >> u16(11)

def compute_qdivisors_AAN_idct_float_rmaj(qtable: Block[int]) -> Block[float]:
  divisors = Block[float](qtable.dims())
  # TODO I could precompute this table to have 64 elements (and thus all combos if the aan[row] * aan[col]
  # and that would get rid of the need for the rmaj specific stuff
  aan_scales = Block[float]((8,), 
                            [1.0, 1.387039845, 1.306562965, 1.175875602, 1.0, 0.785694958, 0.541196100, 0.275899379])
  for row in range(8):
    for col in range(8):
      divisors[row,col] = 1.0 / (float(qtable(row,col)) * aan_scales(row) * aan_scales(col) * 8.0)
  return divisors

### different ways to quantize

def quantize[T](elem: T, qval: int) -> T:
  if elem < 0:
    elem = -elem
    elem += qval >> 1
    elem /= qval
    elem = -elem
  else:
    elem += qval >> 1
    elem /= qval
  return elem

# this basically just rounds
def fquantize(elem: float, qval: float) -> int:
  elem *= qval
  return int(elem + 16384.5) - 16384
  
