from error import *
from cola.bitseq import *
from cola.iter_utils import *
from cola.block import *

def read_bmp(fd: File) -> Tuple[View[u8],int]:
  ### header
  mb = fd.read(2)
  if mb != 'BM':
    raise BMPError()
  fd.read(8) # throw out
  data_offset = int(fd.read_s[4]())
  ### info header
  header_size = int(fd.read_s[4]())
  if header_size != 40:
    raise NotSupportedError()
  bi_width = int(fd.read_s[4]())
  bi_height = int(fd.read_s[4]())
  bi_planes = int(fd.read_s[2]())
  top_down = bi_height < 0
  bi_height = abs(bi_height)
  if bi_planes != 1:
    raise BMPError()
  bi_bit_count = int(fd.read_s[2]())
  if bi_bit_count != 1 and bi_bit_count != 2 and bi_bit_count != 4 and \
     bi_bit_count != 16 and bi_bit_count != 24 and bi_bit_count != 32:
    raise BMPError()
  bi_compression = int(fd.read_s[4]())
  if bi_compression != 0:
    raise NotSupportedError()
  bi_image_size = int(fd.read_s[4]())
  bi_x_pels_per_meter = int(fd.read_s[4]())
  bi_y_pels_per_meter = int(fd.read_s[4]())
  bi_clr_used = int(fd.read_s[4]())
  bi_clr_important = int(fd.read_s[4]())
  ### color palette
  color_palette: Optional[Block[int]] = None
  if bi_bit_count <= 8:
    raise NotTestedError()
    color_palette = Block[int](bi_clr_used, 3)
    for i in range(bi_clr_used):
      color_palette[i, 0] = int(fd.read_s[1]())
      color_palette[i, 1] = int(fd.read_s[1]())
      color_palette[i, 2] = int(fd.read_s[1]())
      fd.read(1) # throw out unused bytes
  else:
    bi_clr_used = 0
  ### the data
  fd.seek(data_offset,0)
  # each row is b,g,r,b,g,r
  # converts BGR to RGB
  # I store this as 3D, where the z dimension is each r or g or b
  if bi_bit_count // 8 == 3:
    align = ((bi_width - 1)|3) + 1
    bmp_data = Block[u8](bi_height, align, bi_bit_count // 8)
    # TODO easier way to scan bottom-up (raster) without having to have explicit outer loop. 
    #   for this, it would require negative strides and swapping start/bottom
    for i in range(bi_height):
      row = bi_height - i - 1
      for br,bg,bb in scan(bmp_data[row,:,0],bmp_data[row,:,1],bmp_data[row,:,2]):
        bb[0] = fd.read_u[1]()
        bg[0] = fd.read_u[1]()
        br[0] = fd.read_u[1]()
    # ignore any bmp padding for the remaining computations
    return bmp_data[:,:bi_width,:],bi_bit_count//3
  else:
    # think this would be either rgb+alpha, grayscale, or single value
    raise NotImplementedError()
      

  

  
  
