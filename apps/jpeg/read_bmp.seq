from error import *
from cola.bitseq import *
from cola.block import *

def read_bmp(fd: File):
  ### header
  mb = fd.read(2)
  if mb != 'BM':
    raise BMPError()
  fd.read(8) # throw out
  data_offset = int(fd.read_s[4]())
  ### info header
  header_size = int(fd.read_s[4]())
  if header_size != 40:
    raise NotSupportedError()
  width = int(fd.read_s[4]())
  height = int(fd.read_s[4]())
  planes = int(fd.read_s[2]())
  if planes != 1:
    raise BMPError()
  bits_per_pixel = int(fd.read_s[2]())
  if bits_per_pixel != 1 and bits_per_pixel != 2 and bits_per_pixel != 4 and bits_per_pixel != 16 and bits_per_pixel != 24 and bits_per_pixel != 32:
    raise BMPError()
  compression = int(fd.read_s[4]())
  if compression != 0:
    raise NotSupportedError()
  image_size = int(fd.read_s[4]())
  x_pixels_per_meter = int(fd.read_s[4]())
  y_pixels_per_meter = int(fd.read_s[4]())
  colors_used = int(fd.read_s[4]())
  impt_colors = int(fd.read_s[4]())
  ### color palette
  color_palette: Optional[Block[int]] = None
  if bits_per_pixel <= 8:
    raise NotTestedError()
    color_palette = Block[int](colors_used, 3)
    for i in range(colors_used):
      color_palette[i, 0] = int(fd.read_s[1]())
      color_palette[i, 1] = int(fd.read_s[1]())
      color_palette[i, 2] = int(fd.read_s[1]())
      fd.read(1) # throw out unused bytes
  else:
    colors_used = 0
  ### the data
  fd.seek(data_offset,0)
  # we assume the typical bottom up pattern
  # each row is b,g,r,b,g,r
  align = ((width - 1)|3) + 1
  bmp_data = Block[u8](height, align * bits_per_pixel // 8)
  # TODO need some way to read into sections of my already created buffer
  for r in range(height):
    for c in range(align * bits_per_pixel // 8):
      bmp_data[r,c] = fd.read_u[1]() 
  print(align)
  print(width)
  print(bits_per_pixel)
  print(bmp_data.dims())
  print(bmp_data.flatten())
      

  

  
  
