# This contains all the groupings of configuration parameters and their default initializations

from constants import *
from jpeglib import *
from turbojpeg import *
from config import *
from cola.bitseq import *
from cola.block import *

# JDIMENSION = u32

# quantization tables
class quant_table:
  quantval: Block[u16]
  sent_table: bool

  def __init__(self, sent_table: bool = False):
    self.quantval = Block[u16](DCTSIZE,DCTSIZE)
    self.sent_table = sent_table

# huffman tables
class huff_table:
  bits: Block[u8]
  huffval: Block[u8] 
  sent_table: bool

  def __init__(self, sent_table: bool = False):
    self.bits = Block[u8](17)
    self.huffval = Block[u8](256)
    self.sent_table = sent_table

class component_info:
  component_id: int
  component_index: int
  h_samp_factor: int
  v_samp_factor: int
  quant_tbl_no: int
  dc_tbl_no: int
  ac_tbl_no: int
  width_in_blocks: u32
  height_in_blocks: u32
  DCT_h_scaled_size: int # only for jpeg_lib >= 70
  DCT_v_scaled_size: int # only for jpeg_lib >= 70
  DCT_scaled_size: int # when jpeg_lib < 70
  downsampled_width: int
  downsampled_height: int
  component_needed: bool
  MCU_width: int
  MCU_height: int
  MCU_blocks int
  MCU_sample_width: int
  last_col_width: int
  last_row_height: int
  

class jpeg_compress_struct:
  in_color_space: int
  X_density: u16
  Y_density: u16
  density_unit: int
  input_components: int
  data_precision: int
  image_width: u32
  image_height: u32
  is_decompressor: bool
  quant_tbls: list[JQUANT_TBL]
  dc_huff_tbls: list[JHUFF_TBL]
  ac_huff_tbls: list[JHUFF_TBL]
  input_gamma: float
  global_state: int
  
  def __init__(self):
    self.quant_tbls = list[JQUANT_TBL](NUM_QUANT_TBLS)
    self.dc_huff_tbls = list[JHUFF_TBL](NUM_HUFF_TBLS)
    self.ac_huff_tbls = list[JHUFF_TBL](NUM_HUFF_TBLS)

class bmp_source_struct:
  bits_per_pixel: int
  use_inversion_array: bool
  colormap: Optional[Block[JSAMPLE]]
  iobuffer: Optional[Block[u8]]
  buffer: Block[JSAMPLE]

class ppm_source_struct:
  iobuffer: Block[JSAMPLE]
  pixrow: View[JSAMPLE]
  buffer_width: u64
  rescale: Optional[Block[JSAMPLE]]
  maxval: u32  

class common_source_struct:
  buffer: Optional[View[JSAMPLE]]  

class tjinstance:
  init: int
  headerRead: init
  errStr: str
  isInstanceError: bool

class CompressMaster:
  cinfo: jpeg_compress_struct
  filetype: str
  bmpinfo: Optional[bmp_source_struct]
  ppminfo: Optional[ppm_source_struct]
  commoninfo: common_source_struct
  tjinfo: Optional[tjinstance]
