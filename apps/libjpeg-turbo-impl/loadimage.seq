from turbojpeg import *
from jpeglib import *
from errors import *
from cola.stream import *

# TODO really need better bit level support    
def start_input_bmp(fd: File, cinfo: jpeg_compress_struct, use_inversion_array: bool):
  bmpfileheader = fd.read(14)  
  if bmpfileheader == '':
    raise LoadImageError('Bitmap header missing')
  if uraw[16](bmpfileheader[0:2]) != u16(0x4D42):
    raise LoadImageError('Not bitmap')
  bmpinfoheader = fd.read(4)
  if bmpinfoheader == '':
    raise LoadImageError('Bitmap info header missing')
  headersize = int(raw[32](bmpinfoheader))
  if headersize < 12 or headersize > 64:
    raise LoadImageError('Bad info header')
  bmpinfoheader = fd.read(headersize-4)
     

def tjLoadImage(filename: str, align: int, pixelFormat: TJPF, flags: int, cinfo: jpeg_compress_struct) -> Block[u8]:
  if len(filename) == 0 or align < 1:
    raise LoadImageError('Invalid argument')
  if (align & (align-1)) != 0:
    raise LoadImageError('Alignment must be a power of 2')  
  try:
    fd = open(filename, 'rb')
    tempc = fd.read(1)
    if tempc == '':
      # eof 
      raise LoadImageError('Input file contains no data')
    fd.seek(0)
    cinfo.in_color_space = pf2cs[pixelFormat.val]
    invert: bool = False
    if tempc == 'B': # bitmap
      start_input_bmp(cinfo, False)
      invert = (flags & TJFLAG_BOTTOMUP) == 0
    elif tempc == 'P': # ppm
      invert = (flags & TJFLAG_BOTTOMUP) != 0
    else:
      raise LoadImageError('Unsupported image type')

    
    fd.close()
  except IOError:
    raise LoadImageError('Cannot open input file')  
