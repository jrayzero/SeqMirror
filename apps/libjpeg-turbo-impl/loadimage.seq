from turbojpeg import *
from jpeglib import *
from errors import *
from config import *
from moreconstants import *
from structs import *
from read_bmp import *
from read_ppm import *
from cola.bitseq import *

@extend
class List[T]:
  def __getitem__(self, idx: J_COLOR_SPACE):
    return self[idx.val]
  def __getitem__(self, idx: TJPF):
    return self[idx.val]

#@inline
def PAD(width: u32, align: int) -> u32:
  return ((width + u32(align) - u32(1)) & u32(~(align - 1)))  
  
def tjLoadImage( cmaster: CompressMaster, filename: str, align: int, pixelFormat: TJPF, flags: int) -> Block[u8]:
  if len(filename) == 0 or align < 1:
    raise LoadImageError('Invalid argument')
  if (align & (align-1)) != 0:
    raise LoadImageError('Alignment must be a power of 2')  
  try:
    fd = open(filename, 'rb')
    tempc = fd.read(1)
    if tempc == '':
      # eof 
      raise LoadImageError('Input file contains no data')
    fd.seek(0,0)
    cmaster.cinfo.in_color_space = pf2cs[pixelFormat.val]
    invert: bool = False
    if tempc == 'B': # bitmap
      jinit_read_bmp(cmaster, False)
      start_input_bmp(cmaster, fd)
      invert = (flags & TJFLAG_BOTTOMUP) == 0
    elif tempc == 'P': # ppm
      jinit_read_ppm(cmaster)
      start_input_ppm(cmaster, fd)
      invert = (flags & TJFLAG_BOTTOMUP) != 0
    else:
      raise LoadImageError('Unsupported image type')
    pixelFormat = cs2pf[cmaster.cinfo.in_color_space]
    cinfo = cmaster.cinfo
    width = cinfo.image_width
    height = cinfo.image_height
    pitch = PAD(u32(width) * u32(tjPixelSize[pixelFormat]), align)
    print('pitch ' + str(pitch))
    scanline = 0
    get_pixel_rows: Optional[Function[void, CompressMaster]] = None
    if cmaster.filetype.lower() == 'bmp':
      if cmaster.bmpinfo.bits_per_pixel == 8:
        get_pixel_rows = get_8bit_row
      elif cmaster.bmpinfo.bits_per_pixel == 24:
        get_pixel_rows = get_24bit_row
      elif cmaster.bmpinfo.bits_per_pixel == 32:
        get_pixel_rows = get_32bit_row
#      while scanline < int(height):
        # TODO left off here
#        pass
    elif cmaster.filetype.lower() == 'ppm':
      raise NotImplementedError()
    fd.close()
  except IOError:
    raise LoadImageError('Cannot open input file')  
