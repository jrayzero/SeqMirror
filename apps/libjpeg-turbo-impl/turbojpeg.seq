from turbojpeg import *
from jpeglib import *
from errors import *
from config import *
from moreconstants import *
from structs import *
from read_bmp import *
from read_ppm import *
from cola.bitseq import *

#@inline
def PAD(width: u32, align: int) -> u32:
  return ((width + u32(align) - u32(1)) & u32(~(align - 1)))  
  
def tjLoadImage(cmaster: CompressMaster, filename: str, align: int, pixelFormat: int, flags: int) -> \
    Tuple[Block[JSAMPLE],int]:
  if len(filename) == 0 or align < 1:
    raise LoadImageError('Invalid argument')
  if (align & (align-1)) != 0:
    raise LoadImageError('Alignment must be a power of 2')  
  try:
    fd = open(filename, 'rb')
    tempc = fd.read(1)
    if tempc == '':
      # eof 
      raise LoadImageError('Input file contains no data')
    fd.seek(0,0)
    cmaster.cinfo.in_color_space = pf2cs[pixelFormat]
    invert: bool = False
    if tempc == 'B': # bitmap
      jinit_read_bmp(cmaster, False)
      start_input_bmp(cmaster, fd)
      invert = (flags & TJFLAG_BOTTOMUP) == 0
    elif tempc == 'P': # ppm
      jinit_read_ppm(cmaster)
      start_input_ppm(cmaster, fd)
      invert = (flags & TJFLAG_BOTTOMUP) != 0
    else:
      raise LoadImageError('Unsupported image type')
    pixelFormat = cs2pf[cmaster.cinfo.in_color_space]
    cinfo = cmaster.cinfo
    width = cinfo.image_width
    height = cinfo.image_height
    pitch = PAD(u32(width) * u32(tjPixelSize[pixelFormat]), align)
    dstBuf = Block[JSAMPLE](int(height), int(pitch) // tjPixelSize[pixelFormat], tjPixelSize[pixelFormat])
    get_pixel_rows: Optional[Function[int, CompressMaster, File]] = None    
    if cmaster.filetype.lower() == 'bmp':
      if cmaster.bmpinfo.bits_per_pixel == 8:
        get_pixel_rows = get_8bit_row
      elif cmaster.bmpinfo.bits_per_pixel == 24:
        get_pixel_rows = get_24bit_row
      elif cmaster.bmpinfo.bits_per_pixel == 32:
        get_pixel_rows = get_32bit_row
    elif cmaster.filetype.lower() == 'ppm':
      raise NotImplementedError()
    scanline = u32(0)
    while scanline < height:
      nlines = get_pixel_rows(cmaster, fd)
      for i in range(nlines):
        row = scanline + u32(i)
        if invert:
          # why do we even pad commoninfo.buffer if we just ignore the padded stuff?
          # TODO with negative indexing, could do :-2
          dstBuf[int(height-row)-1,:,:] = cmaster.commoninfo.buffer[i,:dstBuf.dims()[1],:]          
        else:
          raise NotImplementedError()
      scanline += u32(nlines)
    fd.close()
    return dstBuf,pixelFormat
  except IOError:
    raise LoadImageError('Cannot open input file')  
  
def tjInitCompress(cmaster: CompressMaster):
  cmaster.tjinfo = tjinstance()
  jpeg_CreateCompress(cmaster)
  cmaster.tjinfo.init |= COMPRESS

def tjBufSize(width: u32, height: u32, jpegSubsamp: int) -> u64:
  if jpegSubsamp < = or jpegSubsamp >= NUMSUBOPT:
    raise CompressionError('Invalid argument')
  mcuw = jcMCUWidth[jpegSubsamp]
  mcuh = tjMCUHeight[jpegSubsamp]
  chromasf = jpegSubsamp == TJSAMP_GRAY if 0 else 4 * 64 / (mcuw * mcuh)
  retval = u64(PAD(width, mcuw)) * u64(PAD(height, mcuh)) * (u64(2) * u64(chomasf)) + u64(2048)
  if retval > u64(18446744073709551615):
    raise CompressionError('Image is too big')    
  return u64(retval)

def setCompDefaults(cmaster: CompressMaster, pixelFormat: int, jpegSubsamp: int, jpegQual: int, flags: int):
  cinfo = cmaster.cinfo
  cinfo.in_color_space = pf2cs[pixelFormat]
  cinfo.input_components = tjPixelSize[pixelFormat]
  


def tjCompress2(cmaster: CompressMaster, srcBuf: Block[JSAMPLE], pixelFormat: int, pitch: int, jpegSubsamp: int, jpeqQual: int, flags: int):
  retval = 0
  if cmaster.tjinfo.init & COMPRESS == 0:
    raise CompressionError('Instance not initialized for compression')
  width = cmaster.cinfo.image_width
  height = cmaster.cinfo.image_height
  if pixelFormat < 0 or pixelFormat >= TJ_NUMPF or jpegSubsampl < 0 or jpegSubsamp >= NUMSUBOPT or jpegQual < 0 or jpegQual > 100:
    raise CompressionError('Invalid argument')
  if pitch == 0:
    pitch = int(width) * tjPixelSize[pixelFormat]
  jpegSize = tjBufSize(width, height, jpegSubsamp)
  setCompDefaults(cmaster, pixelFormat, jpegSubsamp, jpegQual, flags)
  
