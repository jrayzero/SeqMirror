from cola.block import *
#from partition import *
from common import *

def intra_16x16_luma_vertical[T,N:int](mb: View[T,N], pred: Block[T,N]) -> bool:
  f,h,w = mb.origin()
  if h > 0:
    i = 0
    # CANDIDATE FOR MEMSET
    for i in range(16):
      pred[0,:,i] = mb(0,-1,i)
      i += 1
    return True
  return False
  
def intra_16x16_luma_horizontal[T,N:int](mb: View[T,N], pred: Block[T,N]) -> bool:
  f,h,w = mb.origin()
  if w > 0:
    i = 0
    # CANDIDATE FOR BROADCAST (not memset cause not linear in the row dim)
    for i in range(16):
      pred[0,i,:] = mb(0,i,-1)
      i += 1
    return True
  return False

def intra_16x16_luma_DC[T,N:int](mb: View[T,N], pred: Block[T,N]):
  f,h,w = mb.origin()
  s = 0
  if h > 0 and w > 0:
    s = 16
    for i in range(16):
      s += mb(0, -1, i) + mb(0,i,-1)
    s >>= 5    
  elif w > 0:
    s = 8
    for i in range(16):
      s += mb(0,i,-1)
    s >>= 4
  elif h > 0:
    s = 8
    for i in range(16):
      s += mb(0,-1,i)
    s >>= 4
  else:
    s = 1 << (bit_depth_y - 1)
  pred[:,:,:] = s

def intra_16x16_luma_planar[T,N:int](mb: View[T,N], pred: Block[T,N]) -> bool:
  f,h,w = mb.origin()
  if h > 0 and w > 0:
    # pull out the pieces to compute H    
    H = 0
    for i in range(8):
      H += (i+1) * (mb(0,-1,8+i)-mb(0,-1,i))    
    # and the pieces for V
    V = 0
    r = 0
    for i in range(8):
      V += (i+1) * (mb(0,8+i,-1)-mb(0,i,-1))
    a = 16 * (mb(0,15,-1)+mb(0,-1,15))
    b = (5 * H + 32) >> 6
    c = (5 * V + 32) >> 6
    for y in range(16):
      for x in range(16):
        clip_val = (a + b * (x - 7) + c * (y - 7) + 16) >> 5
        pred[0,y,x] = (clip1y(clip_val))
    return True    
  else:
    return False

# FOR 4:2:0
#def chroma_col_and_row_avail(smb, mb, pred):
#  _,h,w = smb.origin_within(mb)
#  row = mb[0,-1,w:w+4]
#  col = mb[0,h:h+4,-1]
#  s = 4
#  for r,c in scan(row,col):
#    s += r() + c()
#  s >>= 3
#  pred[smb][:,:,:] = s
#
#def chroma_col_avail(smb, mb, pred):
#  _,h,w = smb.origin_within(mb)
#  col = mb[0,h:h+4,-1]
#  s = 2
#  for c in scan(col):
#    s += c()
#  s >>= 2
#  pred[smb][:,:,:] = s
#
#def chroma_row_avail(smb, mb, pred):
#  _,h,w = smb.origin_within(mb)
#  row = mb[0,-1,w:w+4]
#  s = 2
#  for r in scan(row):
#    s += r()
#  s >>= 2
#  pred[smb][:,:,:] = s
#
#def chroma_none_avail(smb, pred):
#  pred[smb][:,:,:] = 1 << (bit_depth_c - 1)  
#
## for 8x8 blocks since 4:2:0
## I believe that even though we do things on a 4x4 level, it still uses the 8x8 surrounding data
#def intra_chroma_420_DC_only[T,N:int](mb: View[T,N]) -> Block[T,N]:
#  f,h,w = mb.origin()
#  pred = Block(mb)
#  # split into 4x4 subblocks
#  mb_split = split_4x4(mb,8)[0]
#
#  smb0 = mb_split[0] # xO == 0 and yO == 0
#  smb1 = mb_split[1] # xO > 0 and yO == 0
#  smb2 = mb_split[2] # xO == 0 and yO > 0
#  smb3 = mb_split[3]
#
#  # h and w are relative to the whole frame, so they 
#  # ultimately determine if their is data (ex: if
#  # we are at the top of the frame, h == 0 so there 
#  # is no row above)
#
#  # smb0/smb3
#  if h > 0 and w > 0:
#    chroma_col_and_row_avail(smb0, mb, pred)
#    chroma_col_and_row_avail(smb3, mb, pred)
#  elif w > 0:
#    chroma_col_avail(smb0, mb, pred)
#    chroma_col_avail(smb3, mb, pred)
#  elif h > 0:
#    chroma_row_avail(smb0, mb, pred)
#    chroma_row_avail(smb3, mb, pred)
#  else:
#    chroma_none_avail(smb0, pred)
#    chroma_none_avail(smb3, pred)
#
#  # NOTE: smb1 and smb2 are processed in different orders
#  # not sure how important that actually is, but
#  # I'm following the standard here
#  # smb1
#  if h > 0:
#    chroma_row_avail(smb1, mb, pred)
#  elif w > 0:
#    chroma_col_avail(smb1, mb, pred)
#  else:
#    chroma_none_avail(smb1, pred)
#
#  # smb2 
#  if w > 0:
#    chroma_col_avail(smb2, mb, pred)
#  elif h > 0:
#    chroma_row_avail(smb2, mb, pred)
#  else:
#    chroma_none_avail(smb2, pred)
#
#  return True
#
#def intra_chroma_horiz(umb,vmb):
#  assert False
#  f,h,w = umb.origin()
#  if w > 0:
#    upred = Block(umb)
#    vpred = Block(vmb)
#    ucol = umb[0,:,-1]
#    vcol = vmb[0,:,-1]
#    i = 0
#    for uc,vc in scan(ucol,vcol):
#      upred[0,i,:] = uc()
#      vpred[0,i,:] = vc()
#      i += 1
#    return upred,vpred
#  else:
#    return False,None
#
#def intra_chroma_vert(umb,vmb):
#  assert False
#  f,h,w = umb.origin()
#  if w > 0:
#    upred = Block(umb)
#    vpred = Block(vmb)
#    urow = umb[0,-1,:]
#    vrow = vmb[0,-1,:]
#    i = 0
#    for ur,vr in scan(urow,vrow):
#      upred[0,:,i] = ur()
#      vpred[0,:,i] = vr()
#      i += 1
#    return upred,vpred
#  else:
#    return False,None
#    
#def intra_chroma_plane(umb,vmb):
#  assert False
#
## TODO filtering for 8x8
#def intra_8x8_luma_vert(smb, frblk):
#  ref = frblk[smb]
#  f,h,w = ref.origin()
#  if h > 0:
#    pred = Block(smb)
#    row = ref[0,-1,:]
#    prow = 0
#    for r in scan(row):
#      pred[0,prow,:] = r()
#      prow += 1
#    return True
#  else:
#    return False
#
#def intra_8x8_luma_horiz(smb, frblk):
#  ref = frblk[smb]
#  f,h,w = ref.origin()
#  if w > 0:
#    pred = Block(smb)
#    col = ref[0,:,-1]
#    pcol = 0
#    for c in scan(col):
#      pred[0,:,pcol] = c()
#      pcol += 1
#    return True
#  else:
#    return False
#
#def intra_8x8_luma_DC(smb, rblk):
#  ref = rblk[smb]
#  f,h,w = ref.origin()
#  if h > 0 and w > 0:
#    pred = Block(smb)
#    sum = 0 
#    for i in range(8):
#      sum += ref(0,-1,i)
#      sum += ref(0,i,-1)
#    sum = (sum + 8) >> 4
#    pred[:,:,:] = sum
#    return True
#  elif w > 0:
#    pred = Block(smb)
#    sum = 0 
#    for i in range(8):
#      sum += ref(0,i,-1)
#    sum = (sum + 4) >> 3
#    pred[:,:,:] = sum
#    return True
#  elif h > 0:
#    pred = Block(smb)
#    sum = 0 
#    for i in range(8):
#      sum += ref(0,-1,i)
#    sum = (sum + 4) >> 3
#    pred[:,:,:] = sum
#    return True      
#  else:
#    pred = Block(smb)
#    pred[:,:,:] = 1 << (bit_depth_y - 1)    
#    return True
#
#def intra_8x8_luma_ddl(smb, frblk):
#  ref = frblk[smb]
#  f,h,w = ref.origin()
#  if h > 0:
#    pred = Block(smb)
#     # x=y=7
#    pred[0,7,7] = (ref(0,-1,14) + 3 * ref(0,-1,15) + 2) >> 2
#    for y in range(7):
#      for x in range(7):
#        pred[0,y,x] = (ref(0,-1,x+y) + 2 * ref(0,-1,x+y+1) + ref(0,-1,x+y+2) + 2) >> 2
#    return True
#  else:
#    return False
#
#def intra_8x8_luma_ddr(smb, frblk):
#  ref = frblk[smb]
#  f,h,w = ref.origin()
#  if h > 1 and w > 1:
#    pred = Block(smb)
#    for y in range(8):
#      for x in range(8):
#        if x > y:
#          pred[0,y,x] = (ref(0,-1,x-y-2) + 2 * ref(0,-1,x-y-1) + ref(0,-1,x-y) + 2) >> 2
#        elif x < y:
#          pred[0,y,x] = (ref(0,y-x-2,-1) + 2 * ref(0,y-x-1,-1) + ref(0,y-x,-1) + 2) >> 2
#        else:
#          pred[0,y,x] = (ref(0,-1,0) + 2 * ref(0,-1,-1) + ref(0,0,-1) + 2) >> 2
#    return True
#  else:
#    return False
#
## HMM OPT THOUGHT...can we automatically vectorize some of these things to be element-wise like?
#def intra_8x8_luma_vertr(smb, frblk):
#  ref = frblk[smb]
#  f,h,w = ref.origin()
#  if h > 1 and w > 1:
#    pred = Block(smb)
#    for y in range(8):
#      for x in range(8):
#        zVR = 2 * x - y
#        if zVR < 0:
#          if zVR == -1:
#            pred[0,y,x] = (ref(0,0,-1) + 2 * ref(0,-1,-1) + ref(0,-1,0) + 2) >> 2
#          else:
#            pred[0,y,x] = (ref(0,y-2*x-1,-1) + 2 * ref(0,y-2*x-2,-1) + ref(0,y-2*x-3,-1) + 2) >> 2
#        elif zVR & 1 == 0:
#          # even number
#          pred[0,y,x] = (ref(0,-1,x-(y>>1)-1) + ref(0,-1,x-(y>>1)) + 1) >> 1
#        else:
#          # odd number
#          pred[0,y,x] = (ref(0,-1,x-(y>>1)-2) + 2 * ref(0,-1,x-(y>>1)) + ref(0,-1,x-(y>>1)) + 2) >> 2
#    return True
#  else:
#    return False
#
#def intra_8x8_luma_horizd(smb, frblk):
#  ref = frblk[smb]
#  f,h,w = ref.origin()
#  if h > 1 and w > 1:
#    pred = Block(smb)
#    for y in range(8):
#      for x in range(8):
#        zHD = 2 * y - x
#        if zHD < 0:
#          if zHD == -1:
#            pred[0,y,x] = (ref(0,0,-1) + 2 * ref(0,-1,-1) + ref(0,-1,0) + 2) >> 2
#          else:
#            pred[0,y,x] = (ref(0,-1,x-2*y-1) + 2 * ref(0,-1,x-2*y-2) + ref(0,-1,x-2*y-3) + 2) >> 2
#        elif zHD & 1 == 0:
#          # even number
#          pred[0,y,x] = (ref(0,y-(x>>1)-1,-1) + ref(0,-1,y-(x>>1)) + 1) >> 1
#        else:
#          # odd number
#          pred[0,y,x] = (ref(0,y-(x>>1)-2,-1) + 2 * ref(0,y-(x>>1),-1) + ref(0,y-(x>>1),-1) + 2) >> 2
#    return True
#  else:
#    return False
#
#def intra_8x8_luma_vertl(smb, frblk):
#  ref = frblk[smb]
#  f,h,w = ref.origin()
#  if h > 0:
#    pred = Block(smb)
#    for y in range(0,8,2):
#      for x in range(8):
#        pred[0,y,x] = (ref(0,-1,x+(y>>1)) + ref(0,-1,x+(y>>1)+1) + 1) >> 1
#    for y in range(1,8,2):
#      for x in range(8):
#        pred[0,y,x] = (ref(0,-1,x+(y>>1)) + ref(0,-1,x+(y>>1)+1) + 2) >> 2
#    return True
#  return False
#
#def intra_8x8_luma_horizu(smb, frblk):
#  ref = frblk[smb]
#  f,h,w = ref.origin()
#  if w > 0:
#    pred = Block(smb)
#    for y in range(8):
#      for x in range(8):
#        zHU = x+2*y
#        if zHU & 1 == 0:
#          pred[0,y,x] = (ref(0,y+(x>>1),-1) + ref(0,y+(x>>1)+1,-1)+1) >> 1
#        elif zHU == 13:
#          pred[0,y,x] = (ref(0,6,-1) + 3 * ref(0,7,-1) + 2) >> 2
#        elif zHU > 13:
#          pred[0,y,x] = ref(0,7,-1)
#        else:
#          pred[0,y,x] = (ref(0,y+(x>>1),-1) + 2 * ref(0,y+(x>>1)+1,-1) + ref(0,y+(x>>1)+2,-1)) >> 2
#    return True
#  return False
#
