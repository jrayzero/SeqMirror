from common import *
from cola.block import *

qp_per_matrix = [0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,8,8,8]
scale_comp_DC = [8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192,8192]
inv_scale_comp_AC = [256, 320, 256, 320, 320, 400, 320, 400, 256, 320, 256, 320, 320, 400, 320, 400]
scale_comp_AC = [8192, 5243, 8192, 5243, 5243, 3355, 5243, 3355, 8192, 5243, 8192, 5243, 5243, 3355, 5243, 3355]
iscale = 256

def quant_dc4x4_normal(blk, qp) -> bool:
  is_nonzero = False
  qp_per = qp_per_matrix[qp]
  q_bits = Q_BITS + qp_per + 1
  idx = 0
  for _coeff in scan(blk):
    coeff = _coeff()
    if coeff != 0:
      scaled = abs(coeff) * scale_comp_DC[idx]
      level = (scaled + (offset_comp << 1)) >> q_bits
      # for simple case, this seems to always be true
      if level != 0:
        level = abs(level) * -1 if coeff < 0 else abs(level)
        _coeff[UNIT] = level
        is_nonzero = True
      else:
        _coeff[UNIT] = 0
    idx+=1
  return is_nonzero

def rshift_rnd_sf(x,a):
  return (x + (1 << (a-1) )) >> a

def inverse_quant(recons, qp):
#  for i in recons.base.linear_iter():
#    recons.base.buffer[i] = rshift_rnd_sf((recons.base.buffer[i] * iscale) << qp_per_matrix[QP], 6)
  for i in scan(recons):
    i[UNIT] = rshift_rnd_sf((i() * iscale) << qp_per_matrix[QP], 6)

def quant_ac4x4_normal(blk, qp) -> bool:
  is_nonzero = False
  qp_per = qp_per_matrix[qp]
  q_bits = Q_BITS + qp_per
  # skip DC
  first = True
  # TODO scan(blk,1) to skip
  idx = 0
  for _coeff in scan(blk):
    if first:
      idx += 1
      first = False
      continue
    coeff = _coeff()
    scaled = abs(coeff) * scale_comp_AC[idx]
    level = (scaled + offset_comp) >> q_bits
    if level != 0:
      level = abs(level) * -1 if coeff < 0 else abs(level)
      _coeff[UNIT] = rshift_rnd_sf((level * inv_scale_comp_AC[idx]) << qp_per, 4)
      is_nonzero = True
    else:
      _coeff[UNIT] = 0
    idx += 1
  return is_nonzero      
