def check_4x4_availability(blk_4x4, slice_info: Block[int,2]):
  r,c = blk_4x4.origin()
  my_slice = slice_info(r,c)
  up_available = r > 0 and my_slice == slice_info(r-1,c)
  left_available = c > 0 and my_slice == slice_info[blk_4x4[0,-1]]()
  up_right_available = blk_4x4[-1,:8].is_in_bounds() and \
                       my_slice == slice_info[blk_4x4[-1,0]]() and \
                       my_slice == slice_info[blk_4x4[-1,5]]()
  up_left_available = blk_4x4[-1,-1].is_in_bounds() and \]
  return up_available,left_available,up_right_available

def intra_4x4_luma_vertical(ref_frame, pred):
  ref = ref_frame[pred]
  for i in range(4):
    pred[:,i] = ref(-1,i)

def intra_4x4_luma_horizontal(ref_frame, pred):
  ref = ref_frame[pred]
  for i in range(4):
    pred[i,:] = ref(i,-1)

def intra_4x4_DC_a(ref_frame, pred):
  s = 4
  ref = ref_frame[pred]
  for i in range(4):
    s += ref(-1,0) + ref(-1,1) + ref(-1,2) + ref(-1,3)
    s += ref(0,-1) + ref(1,-1) + ref(2,-1) + ref(3,-1)
  pred[:,:] = s >> 3

def intra_4x4_DC_b(ref_frame, pred):
  s = 2
  ref = ref_frame[pred]
  for i in range(4):
    s += ref(0,-1) + ref(1,-1) + ref(2,-1) + ref(3,-1)
  pred[:,:] = s >> 2
    
def intra_4x4_DC_c(ref_frame, pred):
  s = 2
  ref = ref_frame[pred]
  for i in range(4):
    s += ref(-1,0) + ref(-1,1) + ref(-1,2) + ref(-1,3)
  pred[:,:] = s >> 2

def intra_4x4_luma_DC_d(ref_frame, pred, bit_depth_y):
  pred[:,:] = 1 << (bit_depth_y - 1)
  
def intra_4x4_diag_down_left(ref_frame, pred):
  ref = ref_frame[pred][-1,:8]
  for y in range(4):
    for x in range(4):
      if y == 3 and x == 3:
        pred[3,3] = (ref(-1,6) + 3 * ref(-1,7) + 2) >> 2
      else:
        pred[y,x] = (ref(-1,x+y) + 2 * ref(-1,x+y+1) + ref(-1,x+y+2) + 2) >> 2

def intra_4x4_diag_down_right(ref_frame, pred):
  ref = ref_frame[pred]
  for y in range(4):
    for x in range(4):
      if x > y:
        pred[y,x] = (ref(-1,x-y-2) + 2*ref(-2,x-y-1) + ref(-1,x-y) + 2) >> 2
      elif x < y:
        pred[y,x] = (ref(y-x-2,-1) + 2*ref(y-x-1,-1) + ref(y-x,-1) + 2) >> 2
      else:
        pred[y,x] = (ref(-1,0) + 2 * ref(-1,-1) + ref(0,-1) + 2) >> 2

def intra_4x4_vertical_right(ref_frame, pred):
  ref = ref_frame[pred]
  for y in range(4):
    for x in range(4):
      zVR = 2 * x - y
      if zVR == -1:
        pred[y,x] = (ref(0,-1) + 2 * ref(-1,-1) + ref(-1,0) + 2) >> 2
      elif zVR == -2 or zVR == -3:
        pred[y,x] = (ref(y-1,-1) + 2*p(y-2,-1) + p(y-3,-1) + 2) >> 2
      elif zVR % 2 == 0:
        pred[y,x] = (ref(-1,x-(y>>1)-1) + ref(-1, x-(y>>1)) + 1) >> 1
      else:
        pred[y,x] = (ref(-1,x-(y>>1)-2,-1) + 2*ref(-1,x-(y>>1)-1) + ref(-1,x-(y>>1))) >> 2

def intra_4x4_horizontal_down(ref_frame, pred):
  ref = ref_frame[pred]
  
