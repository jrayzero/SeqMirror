import internal.gc as gc
# TODO allow packing bits > 32 by breaking it up into different
# sequences. 

class Bits[N: int]:  
  l1_buffer: Ptr[byte]
  l1_sz: int
  l1_max_cap: int
  l0_buffer: UInt[N]
  l0_sz: int
  fd: Optional[File] # if you have a file, you don't resize l1
  
  def __init__(self, l1_start_capacity = 64, l1_max_capacity = 64):
    self.l0_buffer = UInt[N](0)
    self.l0_sz = 0
    self.l1_buffer = Ptr[byte](l1_start_capacity)
    self.l1_max_cap = l1_max_capacity
    self.l1_sz = 0

  def __init__(self, fd: File, l1_start_capacity = 64, l1_max_capacity = 64):
    self.l0_buffer = UInt[N](0)
    self.l0_sz = 0
    self.l1_buffer = Ptr[byte](l1_start_capacity)
    self.l1_max_cap = l1_max_capacity
    self.l1_sz = 0
    self.fd = fd

  def _pack[T: int](self, val: UInt[T], nbits: int, stuff: bool, stuff_on: u8, stuff_with: u8):
    assert T >= nbits
    nbits_to_pack = nbits
    # MSB align and zero out MSB bits not needed
    bitseq = val << UInt[T](T - nbits)#val >> UInt[T](T-nbits)    
    # see how many bits are left in l0
    while nbits_to_pack > 0:
      l0_bits_free = N - self.l0_sz
      # see if we need all of the free bits
      bits_needed = min(nbits_to_pack, l0_bits_free)
      mask = ~((UInt[T](1) << UInt[T](T-bits_needed)) - UInt[T](1))
      masked_bits = bitseq & mask
      # now shift back to be LSB aligned
      masked_bits >>= UInt[T](T - bits_needed)
      # and convert to UInt[N]
      N_masked_bits = UInt[N](masked_bits)
      # align to appropriate MSB side in l0_buffer
      N_masked_bits <<= UInt[N](l0_bits_free-bits_needed)
      # now shift them to be appended onto l0
      self.l0_buffer |= UInt[N](N_masked_bits)
      # align to MSB
      bitseq <<= UInt[T](bits_needed)
      nbits_to_pack -= bits_needed
      self.l0_sz += bits_needed
      # flush to l1_buffer if needed
      self._put_if(N//2, stuff, stuff_on, stuff_with)

  def pack(self, val: int, nbits, stuff: bool = False, stuff_on: int = 0, stuff_with: int = 0):
    self._pack(UInt[64](val), nbits, stuff, u8(stuff_on), u8(stuff_with))

  def pack[T: int](self, val: Int[T], nbits, stuff: bool = False, stuff_on: UInt[8] = UInt[8](0), stuff_with: UInt[8] = UInt[8](0)):
    self._pack(UInt[T](val), nbits, stuff, u8(stuff_on), u8(stuff_with))

  def pack[T: int](self, val: UInt[T], nbits, stuff: bool = False, stuff_on: UInt[8] = UInt[8](0), stuff_with: UInt[8] = UInt[8](0)):
    self._pack(val, nbits, stuff, u8(stuff_on), u8(stuff_with))

  def pack(self, val: byte, nbits, stuff: bool = False, stuff_on: UInt[8] = UInt[8](0), stuff_with: UInt[8] = UInt[8](0)):
    self._pack(u8(val), nbits, stuff, stuff_on, stuff_with)

  # see if we need to move bits from l0_buffer to l1_buffer
  def _put_if(self, bound: int = N//2, stuff: bool = False, stuff_on: u8 = u8(0), stuff_with: u8 = u8(0)):
    # need to flush to no more than 32 bits
    while self.l0_sz > bound:
      # we move 1 byte at a time from MSB to LSB
      bt = (self.l0_buffer >> UInt[N](N-8)) & UInt[N](0xFF)
      self.l1_buffer[self.l1_sz] = byte(bt)
      self.l1_sz += 1      
      self.l0_buffer <<= UInt[N](8) # get rid of the byte we just did
      self.l0_sz -= 8
      self.flush_or_resize_output_if()
      if stuff and u8(bt) == stuff_on:
        self.l1_buffer[self.l1_sz] = byte(stuff_with)
        self.l1_sz += 1
        self.flush_or_resize_output_if()

  # see if we need to flush our output buffer to file (or resize)
  def flush_or_resize_output_if(self):
    if self.l1_sz == self.l1_max_cap:
      if self.fd:
        # write to file
        assert _C.fwrite(self.l1_buffer, 1, self.l1_sz, self.fd.fp) == self.l1_sz
        self.l1_sz = 0
        self.fd.flush()
      else:
        # resize
        print('resizing')
        self.l1_max_cap = self.l1_max_cap * 2
        self.l1_buffer = self.l1_buffer.resize(self.l1_max_cap)

  # force l0_buffer to be put to l1_buffer, then flush output buffer to file (if have file mode)
  def flush_all(self, reset_l1: bool = True):
    # TODO allow specifying how to stuff partial bytes (0 or 1)
    # pack on 1s if we have partial bytes
    partial = self.l0_sz & 7
    if partial > 0:
      nbits = 8 - partial
      val = (1 << nbits) - 1
      uval = UInt[N](val)
      uval &= UInt[N]((1 << nbits)-1)
      self.l0_sz += nbits
      uval <<= UInt[N](N-self.l0_sz)
      uval |= self.l0_buffer
      self.l0_buffer = uval
    # flush everything to the l1_buffer
    self._put_if(0)
    if self.fd:
      assert  _C.fwrite(self.l1_buffer, 1, self.l1_sz, self.fd.fp) == self.l1_sz
      if reset_l1:
        self.l1_sz = 0
      self.fd.flush()

  # dumps the current state of the l0 and l1 buffers. just prints in decimal for now cause
  # I'm lazy
  def __str__(self):
    s = 'In l1 buffer (' + str(self.l1_sz) + ' bytes):'
    for i in range(self.l1_sz):
      if i > 0:
        s += ' '
      else:
        s += '\n'
      s += str(self.l1_buffer[i])
    s += '\n'
    s += 'In l0 buffer (' + str(self.l0_sz) + ' bits):'
    # mask off junk bits
    if self.l0_sz > 0:
      mask = ~((1 << (N - self.l0_sz)) - 1)
      s += '\n' + str(self.l0_buffer & UInt[N](mask))
    return s

  def ingest(ingest_from: File, nbytes: int = -1, flush_to_l1: bool = True) -> Bits[64]:
    bits = Bits[64]()
    if nbytes == -1:
      ingest_from.seek(0, _C.seek_end())
      nbytes = ingest_from.tell()
      ingest_from.seek(0, _C.seek_set())
    # TODO naively read one byte at a time. make this better later cause it's gonna be slow
    for i in range(nbytes):
      bits.pack(ingest_from.read_b(), 8)
    if flush_to_l1:
      bits.flush_all() # shouldn't need to pack any stuffing bits since you read whole bytes
    return bits    

  def __len__(self):
    return self.l0_sz + self.l1_sz * 8

  def flush_to_file(self, flush_to: File, reset_l1: bool = False):
    # just flush whatever is in l0 and l1 to file
    tmp = self.fd
    self.fd = flush_to
    self.flush_all(reset_l1)
    self.fd = tmp

@extend
class UInt[N: int]:

  def __new__(val) -> UInt[N]:
    return UInt[N].process(val)

  def process[T: int](val: UInt[T]) -> UInt[N]:
    if T == N:
      return UInt[N].process_eq(val)
    elif T < N:
      return UInt[N].process_ext(val)
    else:
      return UInt[N].process_trunc(val)
  def process(val: byte) -> UInt[N]:
    if 8 == N:
      return UInt[N].process_eq(val)
    elif 8 < N:
      return UInt[N].process_ext(val)
    else:
      return UInt[N].process_trunc(val)
  @llvm
  def process_trunc[T: int](val: UInt[T]) -> UInt[N]:
    %0 = trunc i{=T} %val to i{=N}
    ret i{=N} %0
  @llvm
  def process_ext[T: int](val: UInt[T]) -> UInt[N]:
    %0 = zext i{=T} %val to i{=N}
    ret i{=N} %0
  @llvm
  def process_eq[T: int](val: UInt[T]) -> UInt[N]:
    ret i{=N} %val
  @llvm
  def process_trunc(val: byte) -> UInt[N]:
    %0 = trunc i8 %val to i{=N}
    ret i{=N} %0
  @llvm
  def process_ext(val: byte) -> UInt[N]:
    %0 = zext i8 %val to i{=N}
    ret i{=N} %0
  @llvm
  def process_eq(val: byte) -> UInt[N]:
    ret i{=N} %val

      
@extend
class byte:

  def __new__(val) -> byte:
    return byte.process(val)

  def process[T: int](val: Int[T]) -> byte:
    if T == 8:
      return byte.process_eq(val)
    elif T < 8:
      return byte.process_ext(val)
    else:
      return byte.process_trunc(val)

  def process[T: int](val: UInt[T]) -> byte:
    if T == 8:
      return byte.process_eq(val)
    elif T < 8:
      return byte.process_ext(val)
    else:
      return byte.process_trunc(val)      
  @llvm
  def process_trunc[T: int](val: Int[T]) -> byte:
    %0 = trunc i{=T} %val to i8
    ret i8 %0
  @llvm
  def process_trunc[T: int](val: UInt[T]) -> byte:
    %0 = trunc i{=T} %val to i8
    ret i8 %0
  @llvm
  def process_ext[T: int](val: Int[T]) -> byte:
    %0 = zext i{=T} %val to i8
    ret i8 %0
  @llvm
  def process_ext[T: int](val: UInt[T]) -> byte:
    %0 = zext i{=T} %val to i8
    ret i8 %0
  @llvm
  def process_eq[T: int](val: Int[T]) -> byte:
    ret i8 %val
  @llvm
  def process_eq[T: int](val: UInt[T]) -> byte:
    ret i8 %val

@extend
class File:
  
  # T = bytes
  def read_u[T: int](self) -> UInt[T*8]:
    self._ensure_open()
    buf = Ptr[byte](T)
    assert _C.fread(buf, 1, T, self.fp) == T
    self._errcheck("error in read")
    return buf.convert_u[T*8]()

  def read_s[T: int](self) -> Int[T*8]:
    self._ensure_open()
    buf = Ptr[byte](T)
    assert _C.fread(buf, 1, T, self.fp) == T
    self._errcheck("error in read")
    return buf.convert_s[T*8]()

  def read_b(self) -> byte:
    self._ensure_open()
    buf = Ptr[byte](1)
    assert _C.fread(buf, 1, 1, self.fp) == 1
    self._errcheck("error in read")    
    return buf[0]

@extend
class Ptr[T]:
  def resize(self, new_cap: int) -> Ptr[T]:
    return Ptr[T](gc.realloc(self, new_cap * gc.sizeof[T]()))
  @llvm
  def convert_u[N: int](self) -> UInt[N]:
    %0 = bitcast {=T}* %self to i{=N}*
    %1 = load i{=N}, i{=N}* %0 
    ret i{=N} %1  
  @llvm
  def convert_s[N: int](self) -> Int[N]:
    %0 = bitcast {=T}* %self to i{=N}*
    %1 = load i{=N}, i{=N}* %0 
    ret i{=N} %1    

@extend
class float:
  def __new__(i) -> float:
    return float._to_float(i)
  @llvm
  def _to_float[N:int](i: UInt[N]) -> float:
    %0 = uitofp i{=N} %i to double
    ret double %0
  @llvm
  def _to_float[N:int](i: Int[N]) -> float:
    %0 = sitofp i{=N} %i to double
    ret double %0
