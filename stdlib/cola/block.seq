from cola.cola_error import ColaError
import random,string
import math

@extend
class Array[T]:
  def __str__(self) -> str:
    return '[' + ','.join([str(self[i]) for i in range(self.len)]) + ']'

@tuple(init=False)
class ColaSlice:
  start: int
  stop: int
  step: int
  rng: int

  def __new__(start: int, stop: int, step: int):
    rng = int(math.ceil((stop - start) / step))
    return start,stop,step,rng


#  def __str__(self):
#    return '(start: ' + str(self.start) + ', stop: ' + str(self.stop) + ', step: ' + str(self.step) + ')'
    
@extend
class Slice:
#  def compute_range(self):
#    return int(math.ceil((~self.stop - ~self.start) / ~self.step))
#
  def cola_adjust(self, dlen) -> ColaSlice:
    start = ~self.start if self.start else 0
    stop = ~self.stop if self.stop else dlen
    step = ~self.step if self.step else 1
    return ColaSlice(start,stop,step)

def checkN[N:int]():
  if N < 1 or N > 3:
    raise ColaError("dims must be between 1 and 3")

class CoordGrid[N:int]:

  dims: Tuple[int,int,int]
  unique_id: str
 
  def __init__(self, dims: Tuple[int]):
    self.unique_id = ''.join(random.choices(string.printable, k=5))
    self.dims = (dims[0],0,0)
 
  def __init__(self, dims: Tuple[int,int]):
    self.unique_id = ''.join(random.choices(string.printable, k=5))
    self.dims = (dims[0],dims[1],0)

  def __init__(self, dims: Tuple[int,int,int]):
    self.unique_id = ''.join(random.choices(string.printable, k=5))
    self.dims = (dims[0],dims[1],dims[2])

  def __eq__(self, other: CoordGrid[N]):
    return self.unique_id == other.unique_id  

  def __ne__(self, other: CoordGrid[N]):
    return not self == other

  def ndims(self):
    return N

# used for doing blk[UNIT] = ... with a 1x1...x1 dim block.
# it's like blk(), but I can't have empty square brackets
# TODO change UNIT to UNIT
class _UNIT:
  def __init__(self):
    pass
UNIT = _UNIT()


# You always maintain a direct pointer to your closest Block parent
# If you want to go further up, need to do some extra computation
@dataclass(init=False)
class Multidim[T,N:int]:
  dims: Tuple[int,int,int]
  buffer: Array[T]
  # the mapping to your buffer 
  buffer_mapping: Tuple[ColaSlice,ColaSlice,ColaSlice]
  # your mapping to the coordinate system
  coord_mapping: Tuple[ColaSlice,ColaSlice,ColaSlice]
  # your parent with the buffer
  buffer_parent: Multidim[T,N]
  # your backing coordinate system
  cgrid: CoordGrid[N]
  # fixed dimensions
  front_fixed: int

@dataclass(init=False)
class View[T,N:int]:
  base: Multidim[T,N]
  iter_cnt: int

@dataclass(init=False)
class Block[T,N:int]:
  base: Multidim[T,N]

def compareN[N:int,T:int]():
  if N != T:
    raise ColaError()

@extend
class Multidim[T,N:int]:

  # INIT

  def __init__(self, other: Multidim[T,N], make_buffer: bool):
    self.dims = other.dims
    self.coord_mapping = other.coord_mapping
    if make_buffer: 
      self.buffer_parent = self
      self.buffer_mapping = tuple(ColaSlice(0,d,1) for d in self.dims)
      self.buffer = Array[T](self.nunits())
    else:
      self.buffer = other.buffer
      self.buffer_parent = other.buffer_parent
      self.buffer_mapping = other.buffer_mapping
    self.cgrid = other.cgrid
    self.front_fixed = 0

  def __init__(self, other: Multidim[T,N]):
    self.__init__(other, False)

  def __init__(self, dims: Tuple[int], cgrid: CoordGrid[N]):    
    compareN[N,1]()
    self._do_init((dims[0],0,0),cgrid)

  def __init__(self, dims: Tuple[int,int], cgrid: CoordGrid[N]):
    compareN[N,2]()
    self._do_init((dims[0],dims[1],0),cgrid)

  def __init__(self, dims: Tuple[int,int,int], cgrid: CoordGrid[N]):
    compareN[N,3]()
    self._do_init(dims, cgrid)

  def __init__(self, dims: Tuple[int]):
    compareN[N,1]()
    self._do_init((dims[0],0,0), CoordGrid[N](dims))

  def __init__(self, dims: Tuple[int,int]):
    compareN[N,2]()
    self._do_init((dims[0],dims[1],0), CoordGrid[N](dims))

  def __init__(self, dims: Tuple[int,int,int]):
    compareN[N,3]()
    self._do_init(dims, CoordGrid[N](dims))

  def __init__(self, dims: Tuple[int], data: Array[T]):
    compareN[N,1]()
    self._do_init_w_buff((dims[0],0,0), data, CoordGrid[N](dims))

  def __init__(self, dims: Tuple[int,int], data: Array[T]):
    compareN[N,2]()
    self._do_init_w_buff((dims[0],dims[1],0), data, CoordGrid[N](dims))

  def __init__(self, dims: Tuple[int, int, int], data: Array[T]):
    compareN[N,3]()
    self._do_init_w_buff((dims[0],dims[1],dims[2]), data, CoordGrid[N](dims))

  def _do_init(self, dims: Tuple[int,int,int], cgrid: CoordGrid[N]):
    self.dims = dims
    self.buffer_mapping = tuple(ColaSlice(0,d,1) for d in dims)
    self.coord_mapping = tuple(ColaSlice(0,d,1) for d in dims)
    self.buffer_parent = self
    self.cgrid = cgrid
    self.buffer = Array[T](self.nunits())        
    self.front_fixed = 0

  def _do_init_w_buff(self, dims: Tuple[int,int,int], data: Array[T], cgrid: CoordGrid[N]):
    self.dims = dims
    self.buffer_mapping = tuple(ColaSlice(0,d,1) for d in dims)
    self.coord_mapping = tuple(ColaSlice(0,d,1) for d in dims)
    self.buffer_parent = self
    self.cgrid = cgrid
    self.buffer = data
    self.front_fixed = 0

  # internal init
  def __init__(self, buffer: Array[T], dims: Tuple[int,int,int], 
               buffer_mapping: Tuple[ColaSlice,ColaSlice,ColaSlice], 
               cg_mapping: Tuple[ColaSlice, ColaSlice, ColaSlice], 
               parent: Multidim[T,N], cgrid: CoordGrid[N]):
    self.front_fixed = 0
    self.buffer = buffer
    self.dims = dims
    self.buffer_mapping = buffer_mapping
    self.coord_mapping = cg_mapping
    self.buffer_parent = parent
    self.cgrid = cgrid

  # resets fix
  def fix_front[F:int](self):
    if F <= 0:
      raise ColaError()
    if F >= N:
      raise ColaError()
    # can only fix constants
    if F == 1:
      if self.dims[0] != 1:
        raise ColaError()
    elif F == 2:
      if self.dims[0] != 1 or self.dims[1] != 1:
        raise ColaError()
    md = Multidim(self, False)
    md.front_fixed = F
    return md

  def nfree_dims(self):
    return N - self.front_fixed

  # GET_OFFSETTED_BUFFER_MAP

  def get_offsetted_buffer_map(self, offset: Tuple[int]) -> Tuple[int]:
    compareN[N,1]()
    return (self._do_get_offsetted_buffer_map((offset[0],0,0))[0],)

  def get_offsetted_buffer_map(self, offset: Tuple[int,int]) -> Tuple[int,int]:
    compareN[N,2]()
    res = self._do_get_offsetted_buffer_map((offset[0],offset[1],0))
    return (res[0],res[1])

  def get_offsetted_buffer_map(self, offset: Tuple[int,int,int]) -> Tuple[int,int,int]:
    compareN[N,3]()
    return self._do_get_offsetted_buffer_map((offset[0],offset[1],offset[2]))

  def _do_get_offsetted_buffer_map(self, offset: Tuple[int,int,int]) -> Tuple[int,int,int]:
    off0 = offset[0]
    off1 = offset[1]
    off2 = offset[2]
    bm0 = self.buffer_mapping[0]
    bm1 = self.buffer_mapping[1]
    bm2 = self.buffer_mapping[2]
    return (ColaSlice(bm0.start + off0 * bm0.step, bm0.stop, bm0.step),
            ColaSlice(bm1.start + off1 * bm1.step, bm1.stop, bm1.step),
            ColaSlice(bm2.start + off2 * bm2.step, bm2.stop, bm2.step))

  # NDIMS

  def ndims(self):
    return N

  # NUNITS
  
  def nunits(self):
    if N == 1:
      return self.dims[0]
    elif N == 2:
      return self.dims[0] * self.dims[1]
    else:
      return self.dims[0] * self.dims[1] * self.dims[2]

  # ORIGIN FUNCTIONS
  
  # gets your origin relative to your closest ancestor block or ZEROS if you
  # are a Block

  def origin(self):
    return tuple(s.start for s in self.buffer_mapping)

  # gets your origin relative to the tree_relative

  def origin_relative_to(self, tree_relative: Block[T,N]):
    return self.origin_relative_to(tree_relative.base)

  def origin_relative_to(self, tree_relative: View[T,N]):
    return self.origin_relative_to(tree_relative.base)

  def origin_relative_to(self, tree_relative: Multidim[T,N]):
    if self.cgrid != tree_relative.cgrid:
      raise ColaError("different ancestors")
    if N == 1:
      return (self._do_origin_relative_to((tree_relative.coord_mapping[0], ColaSlice(0,0,1), ColaSlice(0,0,1)))[0],)
    elif N == 2:
      res = self._do_origin_relative_to((tree_relative.coord_mapping[0], tree_relative.coord_mapping[1], ColaSlice(0,0,1)))
      return (res[0],res[1])
    else:
      return self._do_origin_relative_to(tree_relative.coord_mapping)

  def _do_origin_relative_to(self, tree_relative: Multidim[T,N]) -> Tuple[int,int,int]:
    scm0 = self.coord_mapping[0]
    scm1 = self.coord_mapping[1]
    scm2 = self.coord_mapping[2]
    tcm0 = tree_relative.coord_mapping[0]
    tcm1 = tree_relative.coord_mapping[1]
    tcm2 = tree_relative.coord_mapping[2]
    return (scm0.start-tcm0.start, scm1.start-tcm1.start, scm2.start-tcm2.start)

  def origin_within(self, tree_relative: Block[T,N]):
    return self.origin_within(tree_relative.base)

  def origin_within(self, tree_relative: View[T,N]):
    return self.origin_within(tree_relative.base)    

  def origin_within(self, tree_relative: Multidim[T,N]):
    if self.cgrid != tree_relative.cgrid:
      raise ColaError("different ancestors")
    if N == 1:
      return (self._do_origin_within(tree_relative),)
    elif N == 2:
      res = self._do_origin_within(tree_relative)
      return (res[0],res[1])
    else:      
      res = self._do_origin_within(tree_relative)
      return res

    # TODO check that self is valid within tree_relative, meaning has a multiple location of tree_relative's stride
    # (other wise it doesn't make sense b/c you wouldn't be WITHIN tree_relative. it would just be relative to)
    
  def _do_origin_within(self, tree_relative: Multidim[T,N]) -> Tuple[int,int,int]:
    scm0 = self.coord_mapping[0]
    scm1 = self.coord_mapping[1]
    scm2 = self.coord_mapping[2]
    tcm0 = tree_relative.coord_mapping[0]
    tcm1 = tree_relative.coord_mapping[1]
    tcm2 = tree_relative.coord_mapping[2]
    return ((scm0.start-tcm0.start)//tcm0.step, (scm1.start-tcm1.start)//tcm1.step, (scm2.start-tcm2.start)//tcm2.step)
    
  # GETITEM
  
  def __getitem__(self, idx: _UNIT):
    if self.nunits() != 1:
      raise ColaError()
    b0,b1,b2,c0,c1,c2 = self._do_getitem((0,0,0))    
    if N == 1:
      return Multidim[T,N](self.buffer, (1,0,0), (b0,b1,b2), (c0,c1,c2), self.buffer_parent, self.cgrid)
    elif N == 2:
      return Multidim[T,N](self.buffer, (1,1,0), (b0,b1,b2), (c0,c1,c2), self.buffer_parent, self.cgrid)
    else:
      return Multidim[T,N](self.buffer, (1,1,1), (b0,b1,b2), (c0,c1,c2), self.buffer_parent, self.cgrid)
  
  # get region in self that covers the region specified by idx
  def __getitem__(self, region: Multidim[T,N]):
    if self.cgrid != region.cgrid:
      raise ColaError("different ancestors")
    for i in region.coord_mapping:
      if i.step != 1:
        raise ColaError("don't know what to do here")
    for i in self.coord_mapping:
      if i.step != 1:
        raise ColaError("don't know what to do here")
    b0,b1,b2,c0,c1,c2 = self._do_getitem(self._do_getitem_coverage(region))
    if N == 1:
      return Multidim[T,N](self.buffer, (b0[3],0,0), (b0,b1,b2), (c0,c1,c2), self.buffer_parent, self.cgrid)
    elif N == 2:
      return Multidim[T,N](self.buffer, (b0[3],b1[3],0), (b0,b1,b2), (c0,c1,c2), self.buffer_parent, self.cgrid)
    else:
      return Multidim[T,N](self.buffer, (b0[3],b1[3],b2[3]), (b0,b1,b2), (c0,c1,c2), self.buffer_parent, self.cgrid)

  def __getitem__(self, idx):
    if N != 1:
      if 1 + self.front_fixed != N:
        raise ColaError("1 dim specified but need " + str(N))
    if N == 1:
      b0,b1,b2,c0,c1,c2 = self._do_getitem((idx,0,0))
      return Multidim[T,N](self.buffer, (b0[3],0,0), (b0,b1,b2), (c0,c1,c2), self.buffer_parent, self.cgrid)
    elif N == 2:
      # frontfixed should be 1
      b0,b1,b2,c0,c1,c2 = self._do_getitem((0,idx,0))
      return Multidim[T,N](self.buffer, (self.dims[0],b1[3],0), (b0,b1,c2), (c0,c1,c2), self.buffer_parent, self.cgrid)     
    elif N == 3:
      # frontfixed should be 2
      b0,b1,b2,c0,c1,c2 = self._do_getitem((0,0,idx))
      return Multidim[T,N](self.buffer, (self.dims[0],self.dims[1],b2[3]), (b0,b1,b2), (c0,c1,c2), self.buffer_parent, self.cgrid)

  def __getitem__[A](self, idx: Tuple[A]):
    return self.__getitem__(idx[0])

  def __getitem__[A,B](self, idx: Tuple[A,B]):
    if N != 2:
      if 2 + self.front_fixed != N:
        raise ColaError("1 dim specified but need " + str(N))
    if N == 2:
      b0,b1,b2,c0,c1,c2 = self._do_getitem((idx[0],idx[1],0))
      return Multidim[T,N](self.buffer, (b0[3],b1[3],0), (b0,b1,b2), (c0,c1,c2), self.buffer_parent, self.cgrid)  
    elif N == 3:
      # frontfixed should be 1
      b0,b1,b2,c0,c1,c2 = self._do_getitem((0,idx[0],idx[1]))
      return Multidim[T,N](self.buffer, (self.dims[0],b1[3],b2[3]), (b0,b1,b2), (c0,c1,c2), self.buffer_parent, self.cgrid)

  def __getitem__[A,B,C](self, idx: Tuple[A,B,C]):
    compareN[N,3]()
    b0,b1,b2,c0,c1,c2 = self._do_getitem((idx[0],idx[1],idx[2]))
    return Multidim[T,N](self.buffer, (b0[3],b1[3],b2[3]), (b0,b1,b2), (c0,c1,c2), self.buffer_parent, self.cgrid)
  
  def _do_getitem_coverage(self, region: Multidim[T,N]) -> Tuple[ColaSlice,ColaSlice,ColaSlice]:
    scm0 = self.coord_mapping[0]
    scm1 = self.coord_mapping[1]
    scm2 = self.coord_mapping[2]
    rcm0 = region.coord_mapping[0]
    rcm1 = region.coord_mapping[1]
    rcm2 = region.coord_mapping[2]
    rel_origin = (rcm0.start-scm0.start, rcm1.start-scm1.start, rcm2.start-scm2.start)
    new_slices = (ColaSlice(rel_origin[0], rel_origin[0]+rcm0[3], 1),
                  ColaSlice(rel_origin[1], rel_origin[1]+rcm1[3], 1),
                  ColaSlice(rel_origin[2], rel_origin[2]+rcm2[3], 1))
    return new_slices

  # TODO bug: If I try to pass the dim index as a generic, I get a not evaluatd error in the typechecker
  @inline
  def _convert0(self, idx: int) -> ColaSlice:
    return ColaSlice(idx,idx+1,1)

  @inline
  def _convert0(self, idx: Slice) -> ColaSlice:
    cola_debug(idx)
    d = self.dims[0]
    return idx.cola_adjust(d)

  @inline
  def _convert1(self, idx: int) -> ColaSlice:
    return ColaSlice(idx,idx+1,1)

  @inline
  def _convert1(self, idx: Slice) -> ColaSlice:
    cola_debug(idx)
    d = self.dims[1]
    return idx.cola_adjust(d)

  @inline
  def _convert2(self, idx: int) -> ColaSlice:
    return ColaSlice(idx,idx+1,1)

  @inline
  def _convert2(self, idx: Slice) -> ColaSlice:
    d = self.dims[2]
    return idx.cola_adjust(d)

  @inline
  def _do_compute_new_ranges(self, bmap: ColaSlice, newmap: ColaSlice):
    start = bmap.start + newmap.start * bmap.step
    stop = min(bmap.start + newmap.stop * bmap.step, bmap.stop)    
    step = bmap.step * newmap.step
    if start > stop:
      cola_debug(bmap)
      cola_debug(newmap)
      raise ColaError()
    return start,stop,step

  # This computes just the new set of slices
  @inline
  def _do_getitem(self, idx_tuple):
    slice_tuple = (self._convert0(idx_tuple[0]), self._convert1(idx_tuple[1]), self._convert2(idx_tuple[2]))
    # now let's update our mappings
    bm0 = self.buffer_mapping[0]
    bm1 = self.buffer_mapping[1]
    bm2 = self.buffer_mapping[2]
    cm0 = self.coord_mapping[0]
    cm1 = self.coord_mapping[1]
    cm2 = self.coord_mapping[2]
    bstart0,bstop0,bstep0 = self._do_compute_new_ranges(bm0, slice_tuple[0])
    bstart1,bstop1,bstep1 = self._do_compute_new_ranges(bm1, slice_tuple[1])
    bstart2,bstop2,bstep2 = self._do_compute_new_ranges(bm2, slice_tuple[2])
    cstart0,cstop0,cstep0 = self._do_compute_new_ranges(cm0, slice_tuple[0])
    cstart1,cstop1,cstep1 = self._do_compute_new_ranges(cm1, slice_tuple[1])
    cstart2,cstop2,cstep2 = self._do_compute_new_ranges(cm2, slice_tuple[2])
    return (ColaSlice(bstart0,bstop0,bstep0),ColaSlice(bstart1,bstop1,bstep1),ColaSlice(bstart2,bstop2,bstep2),
            ColaSlice(cstart0,cstop0,cstep0),ColaSlice(cstart1,cstop1,cstep1),ColaSlice(cstart2,cstop2,cstep2))

  # CALL

  def __call__(self) -> T:
    if self.nunits() != 1:
      raise ColaError('nunits != 1 (' + str(self.nunits()) + ')')
    coord = self.origin()
    if N == 1:
      return self.buffer[coord[0]]
    elif N == 2:
      return self.buffer[coord[0] * self.buffer_parent.dims[1] + coord[1]]
    else:
      return self.buffer[coord[0] * self.buffer_parent.dims[1] * self.buffer_parent.dims[2] + coord[1] * self.buffer_parent.dims[2] + coord[2]]

  def __call__(self, idx) -> T:
    return self.__getitem__((idx,))()

  def __call__(self, idx0, idx1) -> T:
    return self.__getitem__((idx0, idx1))()

  def __call__(self, idx0, idx1, idx2) -> T:
    return self.__getitem__((idx0, idx1, idx2))()

  # ITERATION

  # return the linear index
  def _do_linear_iteration(self):
    if N == 1:
      for i in range(self.buffer_mapping[0].start, self.buffer_mapping[0].stop, self.buffer_mapping[0].step):
        yield i
    elif N == 2:
      for i in range(self.buffer_mapping[0].start, self.buffer_mapping[0].stop, self.buffer_mapping[0].step):
        for j in range(self.buffer_mapping[1].start, self.buffer_mapping[1].stop, self.buffer_mapping[1].step):
          yield i * self.buffer_parent.dims[1] + j
    else:
      for i in range(self.buffer_mapping[0].start, self.buffer_mapping[0].stop, self.buffer_mapping[0].step):
        for j in range(self.buffer_mapping[1].start, self.buffer_mapping[1].stop, self.buffer_mapping[1].step):          
          for k in range(self.buffer_mapping[2].start, self.buffer_mapping[2].stop, self.buffer_mapping[2].step):
            yield i * self.buffer_parent.dims[1] * self.buffer_parent.dims[2] + j * self.buffer_parent.dims[2] + k
    
  # similar to _do_linear_iteration, but doesn't actually linearize and returns a Multidim
  # We iterate over straight ranges (instead of using the buffer mapping) because getitem does the mapping for us, 
  # so we don't want to map twice
  def _do_slice_iteration(self):
    if N == 1:
      for i in range(self.dims[0]):#self.buffer_mapping[0].start, self.buffer_mapping[0].stop, self.buffer_mapping[0].step):
        yield self.__getitem__((i,))
    elif N == 2:
      for i in range(self.dims[0]):#self.buffer_mapping[0].start, self.buffer_mapping[0].stop, self.buffer_mapping[0].step):
        for j in range(self.dims[1]):#self.buffer_mapping[1].start, self.buffer_mapping[1].stop, self.buffer_mapping[1].step):
          yield self.__getitem__((i,j))
    else:
      for i in range(self.dims[0]):#self.buffer_mapping[0].start, self.buffer_mapping[0].stop, self.buffer_mapping[0].step):
        for j in range(self.dims[1]):#self.buffer_mapping[1].start, self.buffer_mapping[1].stop, self.buffer_mapping[1].step):          
          for k in range(self.dims[2]):#self.buffer_mapping[2].start, self.buffer_mapping[2].stop, self.buffer_mapping[2].step):
            yield self.__getitem__((i,j,k))
      
  def __iter__(self):
    return self._do_slice_iteration()

  def linear_iter(self):
    return self._do_linear_iteration()

  def __str__(self):
    s = ''
    if N == 1:
      for i in range(self.buffer_mapping[0].start, self.buffer_mapping[0].stop, self.buffer_mapping[0].step):
        s += str(self.buffer[i]) + ' '
    elif N == 2:
      for i in range(self.buffer_mapping[0].start, self.buffer_mapping[0].stop, self.buffer_mapping[0].step):
        for j in range(self.buffer_mapping[1].start, self.buffer_mapping[1].stop, self.buffer_mapping[1].step):
          s += str(self.buffer[i * self.buffer_parent.dims[1] + j]) + ' '
        s += '\n'
    else:
      for i in range(self.buffer_mapping[0].start, self.buffer_mapping[0].stop, self.buffer_mapping[0].step):
        s += 'dim ' + str(i) + '\n'
        for j in range(self.buffer_mapping[1].start, self.buffer_mapping[1].stop, self.buffer_mapping[1].step):          
          for k in range(self.buffer_mapping[2].start, self.buffer_mapping[2].stop, self.buffer_mapping[2].step):
            s += str(self.buffer[i * self.buffer_parent.dims[1] * self.buffer_parent.dims[2] + j * self.buffer_parent.dims[2] + k]) + ' '
          s += '\n'
    return s

  # SETITEM
  def __setitem__(self, idx, val: T):
    sliced = self.__getitem__(idx)
    # broadcast this idx
    for i in sliced.linear_iter():
      sliced.buffer[i] = val

  def __setitem__[P:int](self, idx, item: View[T,P]):
    self.__setitem__(idx, item.base)

  def __setitem__[P:int](self, idx, item: Block[T,P]):
    self.__setitem__(idx, item.base)
      
  def __setitem__[P:int](self, idx, item: Multidim[T,P]):
    sliced = self.__getitem__(idx)
    if sliced.nunits() != item.nunits():
      raise ColaError("different size writing regions")
    item_buffer = item.buffer
    for l1,l2 in zip(sliced.linear_iter(),item.linear_iter()):
      sliced.buffer[l1] = item_buffer[l2]

  # MATH
  def __sub__(self, other: Multidim[T,N]):
    if self.nunits() != other.nunits():
      raise ColaError()
    md = Multidim(self, True)
    idx = 0 
    for i,j in zip(self.linear_iter(),other.linear_iter()):
      md.buffer[idx] = self.buffer[i] - other.buffer[j]
      idx += 1
    return md

  def __sub__(self, other: T):
    md = Multidim(self, True)
    idx = 0
    for i in self.linear_iter():
      md.buffer[idx] = self.buffer[i] - other
      idx +=1 
    return md

  def __rsub__(self, other: T):
    md = Multidim(self, True)
    idx = 0
    for i in self.linear_iter():
      md.buffer[idx] = other - self.buffer[i]
      idx += 1
    return md

@extend
class Block[T,N:int]:

  def __init__(self, blk: Block[T,N]):
    self.base = Multidim[T,N](blk.base, True)

  def __init__(self, blk: View[T,N]):
    self.base = Multidim[T,N](blk.base, True)

  def __init__(self, *dims):
    self.base = Multidim[T,N](tuple(d for d in dims))

  def __init__(self, dims, data: Array[T]):
    self.base = Multidim[T,N](dims, data)    

  # special constructor for arithmetic
  def __init__(self, md: Multidim[T,N]):
    self.base = md

  def __getitem__(self, idx):
    return View(self.base.__getitem__(idx))

  def __getitem__(self, other: View[T,N]):
    return View(self.base.__getitem__(other.base))

  def __getitem__(self, other: Block[T,N]):
    return View(self.base.__getitem__(other.base))

  def __setitem__(self, idx, val):
    self.base.__setitem__(idx, val)

  def __iter__(self):
    for it in iter(self.base):
      yield View(it)

  def __call__(self, *idxs):
    return self.base.__call__(*idxs)

  def fix_front[F:int](self):
    return View(self.base.fix_front[F]())

  def nfree_dims(self):
    return self.base.nfree_dims()

  def __str__(self):
    return 'block\n' + str(self.base)

  def __sub__(self, other: Block[T,N]):
    return Block(self.base - other.base)

  def __sub__(self, other: View[T,N]):
    return Block(self.base - other.base)

  def __sub__(self, other: T):
    return Block(self.base - other)

  def __rsub__(self, other: T):
    return Block(self.base.__rsub__(other))

@extend
class View[T,N:int]:  
  
  def __init__(self, other: Block[T,N]):
    self.base = other.base

  def __init__(self, other: View[T,N]):
    self.base = other.base
  
  def __init__(self, other: Multidim[T,N]):
    self.base = other

  def __getitem__(self, other: View[T,N]):
    return View(self.base.__getitem__(other.base))

  def __getitem__(self, other: Block[T,N]):
    return View(self.base.__getitem__(other.base))

  def __getitem__(self, idx):
    return View(self.base.__getitem__(idx))

  def __setitem__(self, idx, val):
    self.base.__setitem__(idx, val)
  
  def __call__(self, *idxs):
    return self.base.__call__(*idxs)

  def __iter__(self):
    for it in iter(self.base):
      yield View(it)

  def __str__(self):
    return 'view\n' + str(self.base)

  def dims(self):
    if N == 1:
      return (self.base.dims[0],)
    elif N == 2:
      return (self.base.dims[0],self.base.dims[1])
    else:
      return self.base.dims

  def origin(self):
    if N == 1:
      return (self.base.origin()[0],)
    elif N == 2:
      return (self.base.origin()[0],self.base.origin()[1])
    else:
      return self.base.origin()

  def origin_within(self, container):
    if N == 1:
      return (self.base.origin_within(container)[0],)
    elif N == 2:
      ow = self.base.origin_within(container)
      return (ow[0], ow[1])
    else:
      return self.base.origin_within(container)

  def fix_front[F:int](self):
    return View(self.base.fix_front[F]())

  def nfree_dims(self):
    return self.base.nfree_dims()

  def __sub__(self, other: Block[T,N]) -> Block[T,N]:
    return Block(self.base - other.base)

  def __sub__(self, other: View[T,N]) -> Block[T,N]:
    return Block(self.base - other.base)

  def __sub__(self, other: T) -> Block[T,N]:
    return Block(self.base - other)

  def __rsub__(self, other: T) -> Block[T,N]:
    return Block(self.base.__rsub__(other))

def scan(*args):
  if staticlen(args) == 0:
    raise ColaError()
  elif staticlen(args) == 1:
    return iter(args[0])
  else:
    return zip(*args)
  
# for the compiler
def do_range(start: int, stop: int, step: int):
  return iter(range(start, stop, step))

def do_getview[T,N:int](md: Multidim[T,N], idxs):
  return View[T,N](md.__getitem__(idxs))

def do_min(*args):
  if staticlen(args) == 1:
    return args[0]
  else:
    m = args[0]
    for i in args:
      if i < m:
        m = i
    return m
