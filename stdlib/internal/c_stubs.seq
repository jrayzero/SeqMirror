# Seq runtime functions
from C import seq_print(str)
from C import seq_print_full(str, cobj)
from C import seq_strdup(cobj) -> str
from C import seq_stdin() -> cobj
from C import seq_stdout() -> cobj
from C import seq_stderr() -> cobj
from C import seq_env() -> Ptr[cobj]
from C import seq_time() -> int
from C import seq_time_monotonic() -> int
from C import seq_pid() -> int
from C import seq_lock_new() -> cobj
from C import seq_lock_acquire(cobj, bool, float) -> bool
from C import seq_lock_release(cobj)
from C import seq_rlock_new() -> cobj
from C import seq_rlock_acquire(cobj, bool, float) -> bool
from C import seq_rlock_release(cobj)
from C import seq_i32_to_float(i32) -> float
from C import seek_end() -> int
from C import seek_set() -> int

# <ctype.h>
from C import isdigit(int) -> int
from C import isspace(int) -> int
from C import isupper(int) -> int
from C import islower(int) -> int
from C import toupper(int) -> int
from C import tolower(int) -> int
from C import isalnum(int) -> int
from C import isalpha(int) -> int
from C import istitle(int) -> int

# <math.h>
from C import ceil(float) -> float
from C import floor(float) -> float
from C import fabs(float) -> float
from C import fmod(float, float) -> float
from C import exp(float) -> float
from C import expm1(float) -> float
from C import ldexp(float, int) -> float
from C import log(float) -> float
from C import log2(float) -> float
from C import log10(float) -> float
from C import sqrt(float) -> float
from C import pow(float, float) -> float
from C import round(float) -> float
from C import acos(float) -> float
from C import asin(float) -> float
from C import atan(float) -> float
from C import atan2(float, float) -> float
from C import cos(float) -> float
from C import sin(float) -> float
from C import tan(float) -> float
from C import cosh(float) -> float
from C import sinh(float) -> float
from C import tanh(float) -> float
from C import acosh(float) -> float
from C import asinh(float) -> float
from C import atanh(float) -> float
from C import copysign(float, float) -> float
from C import log1p(float) -> float
from C import trunc(float) -> float
from C import log2(float) -> float
from C import erf(float) -> float
from C import erfc(float) -> float
from C import tgamma(float) -> float
from C import lgamma(float) -> float
from C import remainder(float, float) -> float
from C import frexp(float, Ptr[Int[32]]) -> float
from C import modf(float, Ptr[float]) -> float

# <stdio.h>
from C import ferror(cobj) -> i32
from C import fgetc(cobj) -> i32
from C import fopen(cobj, cobj) -> cobj
from C import fclose(cobj) -> int
from C import fread(cobj, int, int, cobj) -> int
from C import fwrite(cobj, int, int, cobj) -> int
from C import ftell(cobj) -> int
from C import fseek(cobj, int, i32) -> i32
from C import fgets(cobj, int, cobj) -> cobj
from C import fflush(cobj) -> void
from C import getline(Ptr[cobj], Ptr[int], cobj) -> int

# <stdlib.h>
from C import exit(int)
from C import system(cobj) -> int
from C import free(cobj)
from C import atoi(cobj) -> int

# <zlib.h>
from C import gzopen(cobj, cobj) -> cobj
from C import gzerror(cobj, Ptr[i32]) -> cobj
from C import gzgetc(cobj) -> i32
from C import gzgets(cobj, cobj, i32) -> cobj
from C import gzclose(cobj) -> int
from C import gzread(cobj, cobj, u32) -> i32
from C import gzwrite(cobj, cobj, u32) -> i32
from C import gztell(cobj) -> int
from C import gzseek(cobj, int, i32) -> int

# OpenMP
from C import omp_get_num_threads() -> i32
from C import omp_get_thread_num() -> i32
from C import omp_get_max_threads() -> i32
from C import omp_get_num_procs() -> i32

# constants
from C import get_int_max() -> int
