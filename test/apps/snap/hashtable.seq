# Implementation of SNAP aligner's hash table
# https://github.com/amplab/snap/blob/master/SNAPLib/HashTable.{cpp,h}

# Need the following hooks linked to convert C++ SNAPHashTable to Seq object:
# snap_hashtable_ptr(Ptr[byte]) -> Ptr[tuple[K,V]]  --  extract table pointer
# snap_hashtable_len(Ptr[byte]) -> int              --  extract table length
# snap_hashtable_invalid_val(Ptr[byte]) -> V        --  extract "invalid" value

QUADRATIC_CHAINING_DEPTH = 5

class SNAPHashTable[K,V]:
    table: Array[Tuple[V,K]]  # this order is consistent with SNAP
    invalid_val: V

    def _hash(k):
        key = hash(k)
        key ^= int(UInt[64](key) >> UInt[64](33))
        key *= 0xff51afd7ed558ccd
        key ^= int(UInt[64](key) >> UInt[64](33))
        key *= 0xc4ceb9fe1a85ec53
        key ^= int(UInt[64](key) >> UInt[64](33))
        return key

    def __init__(self, size: int, invalid_val: V):
        self.table = Array(size)
        self.invalid_val = invalid_val

        for i in range(size):
            self.table[i] = (invalid_val, K())

    def __init__(self, p: Ptr[byte]):
        from C import snap_hashtable_ptr(Ptr[byte]) -> Ptr[byte]
        from C import snap_hashtable_len(Ptr[byte]) -> int
        from C import snap_hashtable_invalid_val(Ptr[byte]) -> int
        self.table = Array[Tuple[V,K]](Ptr[Tuple[V,K]](snap_hashtable_ptr(p)), snap_hashtable_len(p))
        self.invalid_val = V(snap_hashtable_invalid_val(p))

    def _get_index(self, where: int):
        return int(UInt[64](where) % UInt[64](len(self.table)))

    def _get_entry_index_for_key(self, k: K):
        table = self.table
        table_size = table.len
        table_index = self._get_index(SNAPHashTable[K,V]._hash(k))
        wrapped = False
        n_probes = 1
        invalid_val = self.invalid_val

        while table[table_index][1] != k and table[table_index][0] != invalid_val:
            table_index += (n_probes ** 2) if n_probes < QUADRATIC_CHAINING_DEPTH else 1
            n_probes += 1

            if table_index >=table_size:
                if wrapped:
                    return -1

                wrapped = True
                table_index %= table_size

        return table_index

    def get_value_ptr_for_key(self, k: K):
        table = self.table
        table_size = table.len
        table_index = self._get_index(SNAPHashTable[K,V]._hash(k))
        invalid_val = self.invalid_val
        entry = table[table_index]

        if entry[1] == k and entry[0] != invalid_val:
            return Ptr[V]((table.ptr + table_index).as_byte())
        else:
            n_probes = 0
            while True:
                n_probes += 1

                if n_probes > table_size + QUADRATIC_CHAINING_DEPTH:
                    return Ptr[V]()

                diff = (n_probes**2) if n_probes < QUADRATIC_CHAINING_DEPTH else 1
                table_index = (table_index + diff) % table_size

                entry = table[table_index]
                if not (entry[1] != k and entry[0] != invalid_val):
                    break

            return Ptr[V]((table.ptr + table_index).as_byte())

    def __prefetch__(self, k: K):
        table = self.table
        table_index = self._get_index(SNAPHashTable[K,V]._hash(k))
        (self.table.ptr + table_index).__prefetch_r3__()

    def lookup_slow(self, k: K):
        entry = self._get_entry_index_for_key(k)
        return self.table[entry][0] if entry >= 0 else self.invalid_val

    def __getitem__(self, k: K):
        p = self.get_value_ptr_for_key(k)
        return p[0] if p else self.invalid_val

    def __setitem__(self, k: K, v: V):
        entry = self._get_entry_index_for_key(k)
        if entry >= 0:
            self.table[entry] = (v, k)

def _test():
    h = SNAPHashTable[i32,i32](100, i32(-1))
    for i in range(10):
        h[i32(42 + i*100)] = i32(i)

    for i in range(100):
        print int(h[i32(42 + i*100)])
