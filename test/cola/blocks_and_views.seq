from cola.block import *

# create block
block1D_a = Block[int](10)
block1D_b = Block[int](10)

# write single item
for i in range(10):
  block1D_a[i] = i + 4
# write block to block
block1D_b[:] = block1D_a[0:10:1:0]
@test
def t0():
  assert block1D_b.buffer_equals(block1D_a)
t0()

# create view on whole block
view1D_a = View[int](block1D_a)
@test
def t1():
  assert view1D_a.buffer_equals(block1D_a)
t1()

# write view, single item, int idx
view1D_a[3] = 79
# TODO if I pass this list inline, it can't infer the T of list[T] for list[int]
l = [4, 5, 6, 79, 8, 9, 10, 11, 12, 13]
@test
def t2():
  assert view1D_a.buffer_equals(l)
t2()

# write view, single list item, int idx
view1D_a[4] = [83]
l = [4, 5, 6, 79, 83, 9, 10, 11, 12, 13]
@test
def t3():
  assert view1D_a.buffer_equals(l)
t3()

# write view, single item, ExSlice idx
view1D_a[7:8:1:0] = 43
l = [4, 5, 6, 79, 83, 9, 10, 43, 12, 13]
@test
def t4():
  assert view1D_a.buffer_equals(l)
t4()

# write view, single list item, ExSlice idx
view1D_a[8:9::] = 99
l = [4, 5, 6, 79, 83, 9, 10, 43, 99, 13]
@test
def t5():
  assert view1D_a.buffer_equals(l)
t5()

# write view, multi-item list, slice idx
view1D_a[0:5] = [100,101,102,103,104]
l = [100, 101, 102, 103, 104, 9, 10, 43, 99, 13]
@test
def t6():
  assert view1D_a.buffer_equals(l)
t6()

# write block, block, ExSlice idx
block1D_b[ExSlice(0,10,4,1)] = block1D_a[0:8]
l = [100, 101, 102, 103, 8, 104, 9, 10, 43, 13]
@test
def t7():
  assert block1D_b.buffer_equals(l)
t7()
  
# realize single value, int
val = block1D_b(3)
@test
def t8():
  assert val == 103
t8()

# realize single value, ExSlice
val2 = view1D_a(ExSlice(8,9,1,0))
@test
def t9():
  assert val2 == 99
t9()

# realize single value, Slice
val2 = view1D_a(Slice(8,10,2))
@test
def t10():
  assert val2 == 99
t10()

# 2D reshape
view2D_a = block1D_a.reshape(2,5)
l = [100, 101, 102, 103, 104, 9, 10, 43, 99, 13]
@test
def t11():
  assert view2D_a.buffer_equals(Block[int]((2,5), l), True)
t11()

# realize single value, idxs
block4D = Block[int]([2,2,2,2], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])
@test
def t12():
  assert block4D(1,0,1,1) == 11
t12()
  
# 2D slice and 3D reshape
view3D_a = view2D_a[:, ExSlice(0, 5, 2, 1)].reshape(2,2,2)
l = [100, 101, 103, 104, 9, 10, 99, 13]
@test
def t13():
  assert view3D_a.buffer_equals(Block[int]((2,2,2), l), True)
t13()

# broadcasted arithmetic
sum_a = -17 + block1D_a[0:2] + 145
l = [228, 229]
@test
def t14():
  assert sum_a.buffer_equals(l)
t14()
 
# view-view arithmetic
sum_b = block1D_a[:] + block1D_b[:::]
l = [200, 202, 204, 206, 112, 113, 19, 53, 142, 26]
@test
def t15():
  assert sum_b.buffer_equals(l)
t15()

# block-block arithmetic
sum_c = block1D_a + block1D_b
l = [200, 202, 204, 206, 112, 113, 19, 53, 142, 26]
@test
def t16():
  assert sum_c.buffer_equals(l)
t16()


