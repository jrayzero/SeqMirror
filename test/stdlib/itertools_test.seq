import itertools
import math

def underten(x: int) -> bool:
    return x < 10

def isEven(x: int) -> bool:
    return x % 2 == 0

def boolean(x: int) -> bool:
    if x: return True
    else: return False

def take(n, sequence):
    """Convenience function for partially consuming a long of infinite iterable"""
    return list(itertools.islice(sequence, 0, n, 1))

@test
def combinations():
    assert list(itertools.combinations('ABCD', 2)) == [['A','B'], ['A','C'], ['A','D'], ['B','C'], ['B','D'], ['C','D']]
    test_intermediate = itertools.combinations('ABCD', 2)
    next(test_intermediate)
    assert list(test_intermediate) == [['A','C'], ['A','D'], ['B','C'], ['B','D'], ['C','D']]
    assert list(itertools.combinations(range(4), 3)) == [[0, 1, 2], [0, 1, 3], [0, 2, 3], [1, 2, 3]]
    test_intermediat = itertools.combinations(range(4), 3)
    next(test_intermediat)
    assert list(test_intermediat) == [[0, 1, 3], [0, 2, 3], [1, 2, 3]]

@test
def combinations_with_replacement():
    assert list(itertools.combinations_with_replacement(range(3), 3)) == [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 1], [0, 1, 2], [0, 2, 2], [1, 1, 1], [1, 1, 2], [1, 2, 2], [2, 2, 2]]
    assert list(itertools.combinations_with_replacement('ABC', 2)) == [['A', 'A'], ['A', 'B'], ['A', 'C'], ['B', 'B'], ['B', 'C'], ['C', 'C']]
    test_intermediate = itertools.combinations_with_replacement('ABC', 2)
    next(test_intermediate)
    assert list(test_intermediate) == [['A', 'B'], ['A', 'C'], ['B', 'B'], ['B', 'C'], ['C', 'C']]

# something wrong
@test
def islice():
    ra100 = range(100)
    ra = range(10)
    assert list(itertools.islice(iter('ABCDEFG'), 0, 2, 1)) == ['A', 'B']
    assert list(itertools.islice(iter(ra100), 10, 20, 3)) == [10, 13, 16, 19]
    assert list(itertools.islice(iter(ra100), 10, 3, 20)) == [0]
    assert list(itertools.islice(iter(ra100), 10, 20, 1)) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    assert list(itertools.islice(iter(ra100), 10, 10, 1)) == [0]
    assert list(itertools.islice(iter(ra100), 10, 3, 1)) == [0]
    # stop=len(iterable)
    assert list(itertools.islice(iter(ra), 0, 10, 1)) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    assert list(itertools.islice(iter(ra), 2, 10, 1)) == [2, 3, 4, 5, 6, 7, 8, 9]
    assert list(itertools.islice(iter(ra), 1, 10, 2)) == [1, 3, 5, 7, 9]
    try:
        list(itertools.islice(iter(ra), -5, 10, 1))
        assert False
    except ValueError:
        pass

@test
def count():
    # infinite loop here
    # print take(3, itertools.count(3.25, 1.0))
    assert take(3, zip('abc', itertools.count(3.25, 1.0))) == [('a', 3.25), ('b', 4.25), ('c', 5.25)]
    assert take(2, zip('abc', itertools.count(-1.0, 1.0))) == [('a', -1.0), ('b', 0.0)]
    assert take(2, zip('abc', itertools.count(-3.0, 1.0))) == [('a', -3.0), ('b', -2.0)]

@test
def repeat():
    assert list(itertools.repeat('a', 3)) == ['a', 'a', 'a']
    assert list(itertools.repeat(1, 10)) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    assert list(itertools.repeat('a', -1)) == ['a']
    assert len(list(itertools.repeat('a', 0))) == 0

@test
def cycle():
    assert take(10, zip('zzzzzzzzzzz', itertools.cycle(iter('abc')))) == [('z', 'a'), ('z', 'b'), ('z', 'c'), ('z', 'a'), ('z', 'b'), ('z', 'c'), ('z', 'a'), ('z', 'b'), ('z', 'c'), ('z', 'a')]
    # print take(10, zip('zzzzzzzzzzz', itertools.cycle(['a', 'b'])))
    i = 0
    for x in itertools.cycle(iter('abc')):
        if i == 10:
            i = 0
            break
        i += 1
        print x
    for x in itertools.cycle(iter([0, 1, 2])):
        if i == 10:
            i = 0
            break
        i += 1
        print x

@test
def compress():
    assert list(itertools.compress('ABCDEF', [1, 0, 1, 0, 1, 1])) == ['A', 'C', 'E', 'F']
    assert list(itertools.compress('ABCDEF', [1, 1, 1, 1, 1, 1])) == ['A', 'B', 'C', 'D', 'E', 'F']
    assert list(itertools.compress('ABCDEF', [1, 0, 1])) == ['A', 'C']
    assert list(itertools.compress('ABC', [0, 1, 1, 1, 1, 1])) == ['B', 'C']

@test
def dropwhile():
    data = [1, 3, 5, 20, 2, 4, 6, 8]
    assert list(itertools.dropwhile(underten, data)) == [20, 2, 4, 6, 8]

@test
def takewhile():
    data = [1, 3, 5, 20, 2, 4, 6, 8]
    assert list(itertools.takewhile(underten, data)) == [1, 3, 5]

@test
def filterfalse():
    assert list(itertools.filterfalse(isEven, range(10))) == [1, 3, 5, 7, 9]
    assert list(itertools.filterfalse(boolean, [0, 1, 0, 2, 0])) == [0, 0, 0]

@test
def permutations():
    assert list(itertools.permutations(range(3), 2)) == [[0, 1], [0,2], [1,0], [1,2], [2,0], [2,1]]

    for n in range(3):
        values = [5*x-12 for x in range(n)]
        for r in range(n+2):
            result = list(itertools.permutations(values, r))
            if r > n:   # right number of perms
                assert len(result) == 0
            # factorial is not yet implemented in math
            # else: fact(n) / fact(n - r)

@test
def accumulate():
    # addition
    assert list(itertools.accumulate(range(10), int.__add__, 0)) == [0, 1, 3, 6, 10, 15, 21, 28, 36, 45]
    assert list(itertools.accumulate([7], int.__add__, 0)) == [7]       # iterable of length 1
    assert list(itertools.accumulate('abc', str.__add__, '')) == ['a', 'ab', 'abc']
    assert list(itertools.accumulate([''], str.__add__, str(0))) == ['']
    # multiply
    assert list(itertools.accumulate(range(10), int.__mul__, 0)) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    assert list(itertools.accumulate([1, 2, 3, 4, 5], int.__mul__, 0)) == [1, 2, 6, 24, 120]
    assert list(itertools.accumulate([7], int.__mul__, 0)) == [7]
    # pass

@test
def chain():
    assert list(itertools.chain(['abc', 'def'])) == ['a', 'b', 'c', 'd', 'e', 'f']
    assert list(itertools.chain(['abc'])) == ['a', 'b', 'c']
    assert list(itertools.chain(['a', 'b', 'c'])) == ['a', 'b', 'c']

@test
def starmap():
    assert list(itertools.starmap(math.pow, [(2.0, 5.0), (3.0, 2.0), (10.0, 3.0)])) == [32.0, 9.0,  1000.0]
    assert list(itertools.starmap(math.pow, [(0.0, 1.0), (1.0, 2.0), (2.0, 3.0)])) == [0.0**1.0, 1.0**2.0, 2.0**3.0]

@test
def groupby():
    def key_str(s: str):
        return s
    assert list(itertools.groupby(iter('AAAABBBCCDAABBC'), key_str)) == [('A', ['A', 'A', 'A', 'A']), ('B', ['B', 'B', 'B']), ('C', ['C', 'C']), ('D', ['D']), ('A', ['A', 'A']), ('B', ['B', 'B']), ('C', ['C'])]

@test
def zip_longest():
    assert list(itertools.zip_longest('ABCDE', '12345', fillvalue='-')) == [('A', '1'), ('B', '2'), ('C', '3'), ('D', '4'), ('E', '5')]
    assert list(itertools.zip_longest('ABCDE', '123', fillvalue='-')) == [('A', '1'), ('B', '2'), ('C', '3'), ('D', '-'), ('E', '-')]
    assert list(itertools.zip_longest('123', 'ABCDE', fillvalue='-')) == [('1', 'A'), ('2', 'B'), ('3', 'C'), ('-', 'D'), ('-', 'E')]
    assert list(itertools.zip_longest('', 'ABCDE', fillvalue='-')) == [('-', 'A'), ('-', 'B'), ('-', 'C'), ('-', 'D'), ('-', 'E')]
    assert list(itertools.zip_longest('ABCDE', '', fillvalue='-')) == [('A', '-'), ('B', '-'), ('C', '-'), ('D', '-'), ('E', '-')]
    assert not list(itertools.zip_longest('', '', fillvalue='-'))

combinations()
combinations_with_replacement()
islice()
count()
repeat()
cycle()
compress()
dropwhile()
takewhile()
filterfalse()
permutations()
accumulate()
chain()
starmap()
groupby()
zip_longest()

@test
def zip_test():
    assert list(zip()) == []
    assert list(zip((1, 2))) == [(1,), (2,)]
    assert list(zip([1, 2], ['a', 'b'], (False, True))) == [(1, 'a', False), (2, 'b', True)]
zip_test()

